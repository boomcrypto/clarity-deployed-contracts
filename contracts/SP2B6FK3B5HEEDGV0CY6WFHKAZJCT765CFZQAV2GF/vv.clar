(use-trait ft-trait 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.ft-trait.ft-trait) (use-trait extension-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (define-constant DEPLOYER tx-sender) (define-map approved-contracts principal bool) (define-map approved-caller principal bool) (define-data-var owner principal tx-sender) (define-private (check-is-approved) (ok (asserts! (default-to false (map-get? approved-contracts tx-sender)) (err u9)))) (define-private (check-is-owner) (ok (asserts! (is-eq tx-sender (var-get owner)) (err u9)))) (define-public (set-owner (new-owner principal)) (begin (try! (check-is-owner)) (ok (var-set owner new-owner)))) (define-public (add-approved-contract (new-approved-contract principal)) (begin (try! (check-is-owner)) (ok (map-set approved-contracts new-approved-contract true)))) (define-public (set-approved-caller (caller principal) (well bool)) (begin (try! (check-is-owner)) (ok (if well (map-set approved-caller caller true) (map-delete approved-caller caller))))) (define-public (flash-loan-stx (flash-loan-user-trait <extension-trait>) (amount uint) (target principal) (data (buff 2048)) (caller principal)) (let ((recipient tx-sender)) (asserts! (is-ok (check-is-approved)) (err u9)) (asserts! (is-some (map-get? approved-caller caller)) (err u10)) (as-contract (try! (stx-transfer? amount tx-sender recipient))) (try! (contract-call? flash-loan-user-trait callback target data)) (try! (stx-transfer? amount recipient (as-contract tx-sender))) (ok true))) (define-public (withdraw (recipient principal)) (begin (try! (check-is-owner)) (as-contract (try! (stx-transfer? (stx-get-balance tx-sender) tx-sender recipient))) (ok true))) (stx-transfer? u1000000000 tx-sender (as-contract tx-sender))