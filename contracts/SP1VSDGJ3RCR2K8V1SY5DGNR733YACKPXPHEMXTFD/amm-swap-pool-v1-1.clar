(define-constant E8 u100000000) (define-constant ME tx-sender) (define-read-only (s2e (n uint)) (* n u100)) (define-data-var l1 uint u1000000) (define-public (set-l1 (l uint)) (begin (asserts! (is-eq tx-sender ME) (err u0)) (ok (var-set l1 l)))) (define-read-only (g1) (let ((su (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token)))) (ua (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.simple-weight-pool-alex get-balances 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda))) (as (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 get-balances 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u50000000 u50000000))) (x (/ (* E8 (get balance-y su)) (get balance-x su))) (y (/ (* x (get balance-x ua)) (get balance-y ua))) (z (/ (* y (get balance-x as)) (get balance-y as)))) (ok z))) (define-public (i1 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t0 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0))) (tb (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.swap-helper-v1-03 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx (s2e tb) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o1 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.swap-helper-v1-03 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda (s2e in) none))) (tb (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) (t2 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token tb u0))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (b1 (d uint)) (let ((l (var-get l1)) (r0 (unwrap-panic (g1))) (r1 (if (> r0 (+ E8 l)) (i1 d) (err u0))) (r2 (if (< r0 (- E8 l)) (o1 d) (err u0))) (r3 (if (and (is-err r1) (is-err r2)) E8 (unwrap-panic (g1)))) (r4 (if (> r3 (+ E8 l)) (i1 d) (err u0))) (r5 (if (< r3 (- E8 l)) (o1 d) (err u0))) (r6 (if (and (is-err r4) (is-err r5)) E8 (unwrap-panic (g1)))) (r7 (if (> r6 (+ E8 l)) (i1 d) (err u0))) (r8 (if (< r6 (- E8 l)) (o1 d) (err u0))) (r9 (if (and (is-err r7) (is-err r8)) E8 (unwrap-panic (g1)))) (ra (if (> r9 (+ E8 l)) (i1 d) (err u0))) (rb (if (< r9 (- E8 l)) (o1 d) (err u0))) (rc (if (and (is-err ra) (is-err rb)) E8 (unwrap-panic (g1)))) (rd (if (> rc (+ E8 l)) (i1 d) (err u0))) (re (if (< rc (- E8 l)) (o1 d) (err u0)))) (ok (list r1 r2)))) (define-data-var l2 uint u1300000) (define-public (set-l2 (l uint)) (begin (asserts! (is-eq tx-sender ME) (err u0)) (ok (var-set l2 l)))) (define-read-only (g2) (let ((su (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token)))) (au (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token)))) (aa (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko E8))) (sa (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8))) (x (/ (* E8 (get balance-y su)) (get balance-x su))) (y (/ (* x (get balance-x au)) (get balance-y au))) (z (/ (* y (get balance-x aa)) (get balance-y aa))) (w (/ (* z (get balance-x sa)) (get balance-y sa)))) (ok w))) (define-public (i2 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-multi-hop-swap-v1-1 swap-x-for-z 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0 false true))) (tb (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper-a 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 u100000000 (s2e tb) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o2 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper-a 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko u100000000 u100000000 (s2e in) none))) (tb (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender))) (t2 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-multi-hop-swap-v1-1 swap-x-for-z 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token tb u0 false true))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (b2 (d uint)) (let ((l (var-get l2)) (r0 (unwrap-panic (g2))) (r1 (if (> r0 (+ E8 l)) (i2 d) (err u0))) (r2 (if (< r0 (- E8 l)) (o2 d) (err u0))) (r3 (if (and (is-err r1) (is-err r2)) E8 (unwrap-panic (g2)))) (r4 (if (> r3 (+ E8 l)) (i2 d) (err u0))) (r5 (if (< r3 (- E8 l)) (o2 d) (err u0))) (r6 (if (and (is-err r4) (is-err r5)) E8 (unwrap-panic (g2)))) (r7 (if (> r6 (+ E8 l)) (i2 d) (err u0))) (r8 (if (< r6 (- E8 l)) (o2 d) (err u0))) (r9 (if (and (is-err r7) (is-err r8)) E8 (unwrap-panic (g2)))) (ra (if (> r9 (+ E8 l)) (i2 d) (err u0))) (rb (if (< r9 (- E8 l)) (o2 d) (err u0))) (rc (if (and (is-err ra) (is-err rb)) E8 (unwrap-panic (g2)))) (rd (if (> rc (+ E8 l)) (i2 d) (err u0))) (re (if (< rc (- E8 l)) (o2 d) (err u0)))) (ok (list r1 r2)))) (define-data-var l3 uint u10000000) (define-public (set-l3 (l uint)) (begin (asserts! (is-eq tx-sender ME) (err u0)) (ok (var-set l3 l)))) (define-read-only (g3) (let ((sw (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token)))) (ws (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi E8))) (x (/ (* E8 (get balance-y sw)) (get balance-x sw))) (y (/ (* x (get balance-x ws)) (get balance-y ws)))) (ok y))) (define-public (i3 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token in u0))) (tb (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 (s2e tb) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o3 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi u100000000 (s2e in) none))) (tb (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) (t2 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token tb u0))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (b3 (d uint)) (let ((l (var-get l3)) (r0 (unwrap-panic (g3))) (r1 (if (> r0 (+ E8 l)) (i3 d) (err u0))) (r2 (if (< r0 (- E8 l)) (o3 d) (err u0))) (r3 (if (and (is-err r1) (is-err r2)) E8 (unwrap-panic (g3)))) (r4 (if (> r3 (+ E8 l)) (i3 d) (err u0))) (r5 (if (< r3 (- E8 l)) (o3 d) (err u0))) (r6 (if (and (is-err r4) (is-err r5)) E8 (unwrap-panic (g3)))) (r7 (if (> r6 (+ E8 l)) (i3 d) (err u0))) (r8 (if (< r6 (- E8 l)) (o3 d) (err u0))) (r9 (if (and (is-err r7) (is-err r8)) E8 (unwrap-panic (g3)))) (ra (if (> r9 (+ E8 l)) (i3 d) (err u0))) (rb (if (< r9 (- E8 l)) (o3 d) (err u0))) (rc (if (and (is-err ra) (is-err rb)) E8 (unwrap-panic (g3)))) (rd (if (> rc (+ E8 l)) (i3 d) (err u0))) (re (if (< rc (- E8 l)) (o3 d) (err u0)))) (ok (list r1 r2)))) (define-data-var l4 uint u800000) (define-public (set-l4 (l uint)) (begin (asserts! (is-eq tx-sender ME) (err u0)) (ok (var-set l4 l)))) (define-read-only (g4) (let ((sa (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 get-balances 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u50000000 u50000000))) (as (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8))) (x (/ (* E8 (get balance-y sa)) (get balance-x sa))) (y (/ (* x (get balance-x as)) (get balance-y as)))) (ok y))) (define-public (i4 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.swap-helper-v1-03 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token (s2e in) none))) (tb (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token get-balance tx-sender))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 tb none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o4 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u100000000 (s2e in) none))) (tb (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token get-balance tx-sender))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.swap-helper-v1-03 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx tb none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (b4 (d uint)) (let ((l (var-get l4)) (r0 (unwrap-panic (g4))) (r1 (if (> r0 (+ E8 l)) (i4 d) (err u0))) (r2 (if (< r0 (- E8 l)) (o4 d) (err u0))) (r3 (if (and (is-err r1) (is-err r2)) E8 (unwrap-panic (g4)))) (r4 (if (> r3 (+ E8 l)) (i4 d) (err u0))) (r5 (if (< r3 (- E8 l)) (o4 d) (err u0))) (r6 (if (and (is-err r4) (is-err r5)) E8 (unwrap-panic (g4)))) (r7 (if (> r6 (+ E8 l)) (i4 d) (err u0))) (r8 (if (< r6 (- E8 l)) (o4 d) (err u0))) (r9 (if (and (is-err r7) (is-err r8)) E8 (unwrap-panic (g4)))) (ra (if (> r9 (+ E8 l)) (i4 d) (err u0))) (rb (if (< r9 (- E8 l)) (o4 d) (err u0))) (rc (if (and (is-err ra) (is-err rb)) E8 (unwrap-panic (g4)))) (rd (if (> rc (+ E8 l)) (i4 d) (err u0))) (re (if (< rc (- E8 l)) (o4 d) (err u0)))) (ok (list r1 r2)))) (define-data-var l5 uint u800000) (define-public (set-l5 (l uint)) (begin (asserts! (is-eq tx-sender ME) (err u0)) (ok (var-set l5 l)))) (define-read-only (g5) (let ((sb (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u50000000 u50000000))) (bs (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc E8))) (x (/ (* E8 (get balance-y sb)) (get balance-x sb))) (y (/ (* x (get balance-x bs)) (get balance-y bs)))) (ok y))) (define-public (i5 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.swap-helper-v1-03 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc (s2e in) none))) (tb (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 tb none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o5 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u100000000 (s2e in) none))) (tb (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.swap-helper-v1-03 swap-helper 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx tb none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (b5 (d uint)) (let ((l (var-get l5)) (r0 (unwrap-panic (g5))) (r1 (if (> r0 (+ E8 l)) (i5 d) (err u0))) (r2 (if (< r0 (- E8 l)) (o5 d) (err u0))) (r3 (if (and (is-err r1) (is-err r2)) E8 (unwrap-panic (g5)))) (r4 (if (> r3 (+ E8 l)) (i5 d) (err u0))) (r5 (if (< r3 (- E8 l)) (o5 d) (err u0))) (r6 (if (and (is-err r4) (is-err r5)) E8 (unwrap-panic (g5)))) (r7 (if (> r6 (+ E8 l)) (i5 d) (err u0))) (r8 (if (< r6 (- E8 l)) (o5 d) (err u0))) (r9 (if (and (is-err r7) (is-err r8)) E8 (unwrap-panic (g5)))) (ra (if (> r9 (+ E8 l)) (i5 d) (err u0))) (rb (if (< r9 (- E8 l)) (o5 d) (err u0))) (rc (if (and (is-err ra) (is-err rb)) E8 (unwrap-panic (g5)))) (rd (if (> rc (+ E8 l)) (i5 d) (err u0))) (re (if (< rc (- E8 l)) (o5 d) (err u0)))) (ok (list r1 r2)))) (define-data-var l6 uint u1000000) (define-public (set-l6 (l uint)) (begin (asserts! (is-eq tx-sender ME) (err u0)) (ok (var-set l6 l)))) (define-read-only (g6) (let ((sb (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc E8))) (bs (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc E8))) (x (/ (* E8 (get balance-y sb)) (get balance-x sb))) (y (/ (* x (get balance-x bs)) (get balance-y bs)))) (ok y))) (define-public (i6 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper-b 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 u5000000 u100000000 (s2e in) none ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o6 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-helper-b 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx u100000000 u5000000 u100000000 (s2e in) none ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (b6 (d uint)) (let ((l (var-get l6)) (r0 (unwrap-panic (g6))) (r1 (if (> r0 (+ E8 l)) (i6 d) (err u0))) (r2 (if (< r0 (- E8 l)) (o6 d) (err u0))) (r3 (if (and (is-err r1) (is-err r2)) E8 (unwrap-panic (g6)))) (r4 (if (> r3 (+ E8 l)) (i6 d) (err u0))) (r5 (if (< r3 (- E8 l)) (o6 d) (err u0))) (r6 (if (and (is-err r4) (is-err r5)) E8 (unwrap-panic (g6)))) (r7 (if (> r6 (+ E8 l)) (i6 d) (err u0))) (r8 (if (< r6 (- E8 l)) (o6 d) (err u0))) (r9 (if (and (is-err r7) (is-err r8)) E8 (unwrap-panic (g6)))) (ra (if (> r9 (+ E8 l)) (i6 d) (err u0))) (rb (if (< r9 (- E8 l)) (o6 d) (err u0))) (rc (if (and (is-err ra) (is-err rb)) E8 (unwrap-panic (g6)))) (rd (if (> rc (+ E8 l)) (i6 d) (err u0))) (re (if (< rc (- E8 l)) (o6 d) (err u0)))) (ok (list r1 r2)))) (define-public (swap-helper (d uint) (k uint)) (let ((s (list (unwrap-panic (b5 d)) (unwrap-panic (b4 d)) (unwrap-panic (b3 d)) (unwrap-panic (b2 d)) (unwrap-panic (b1 d)) (unwrap-panic (b6 d)))) (c (stx-get-balance tx-sender))) (and (> c k) (try! (stx-transfer? (- c k) tx-sender 'SP1VSDGJ3RCR2K8V1SY5DGNR733YACKPXPHEMXTFD))) (ok s)))