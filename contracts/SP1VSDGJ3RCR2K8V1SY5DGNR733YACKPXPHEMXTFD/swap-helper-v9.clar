(define-constant E8 u100000000) (define-constant E2 u100) (define-constant VT tx-sender) (define-read-only (s2e (n uint)) (* n E2)) (define-read-only (c1) (let ((p1 (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token)))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.simple-weight-pool-alex get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda))) (p3 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8))) (x1 (s2e (get balance-x p1))) (y1 (s2e (get balance-y p1))) (f1 u300000) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (x3 (get balance-y p3)) (y3 (get balance-x p3)) (f3 (get fee-rate-y p3)) (z (/ (* (/ (* (/ (* E8 y1) x1) y2) x2) y3) x3)) (e (+ f1 f2 f3)) (pe (if (< z E8) (+ z e) (- z e))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) (/ (* x1 y2) x2))) (s3 (/ (* E8 E8) y3)) (s (/ (* E8 E8) (+ s1 s2 s3))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (d3 (/ (* t2 (- E8 f3)) E8)) (t3 (/ (* d3 y3) (+ d3 x3))) (ox (if (> t3 d) (- t3 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i1 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.simple-weight-pool-alex swap-y-for-alex 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender))) none))) (t3 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token get-balance tx-sender)) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o1 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8 (s2e in) none))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.simple-weight-pool-alex swap-alex-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wusda (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token get-balance tx-sender)) none))) (t3 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c2) (let ((p1 (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token)))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko E8))) (p3 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8))) (x1 (s2e (get balance-x p1))) (y1 (s2e (get balance-y p1))) (f1 u300000) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (x3 (get balance-y p3)) (y3 (get balance-x p3)) (f3 (get fee-rate-y p3)) (z (/ (* (/ (* (/ (* E8 y1) x1) y2) x2) y3) x3)) (e (+ f1 f2 f3)) (pe (if (< z E8) (+ z e) (- z e))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) (/ (* x1 y2) x2))) (s3 (/ (* E8 E8) y3)) (s (/ (* E8 E8) (+ s1 s2 s3))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (d3 (/ (* t2 (- E8 f3)) E8)) (t3 (/ (* d3 y3) (+ d3 x3))) (ox (if (> t3 d) (- t3 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i2 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko E8 (s2e (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender))) none))) (t3 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token get-balance tx-sender)) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o2 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u100000000 (s2e in) none))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wdiko u100000000 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token get-balance tx-sender)) none))) (t3 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c3) (let ((p1 (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token)))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi E8))) (x1 (s2e (get balance-x p1))) (y1 (s2e (get balance-y p1))) (f1 u300000) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (z (/ (* (/ (* E8 y1) x1) y2) x2)) (e (+ f1 f2)) (pe (if (< z E8) (+ z e) (- z e))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) y2)) (s (/ (* E8 E8) (+ s1 s2))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (ox (if (> t2 d) (- t2 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i3 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token in u0))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o3 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wcorgi E8 (s2e in) none))) (t2 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u0))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c4) (let ((p1 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u50000000 u50000000))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8))) (x1 (s2e (get balance-x p1))) (y1 (s2e (get balance-y p1))) (f1 (get fee-rate-x p1)) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (z (/ (* (/ (* E8 y1) x1) y2) x2)) (e (+ f1 f2)) (pe (if (< z E8) (+ z e) (- z e))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) y2)) (s (/ (* E8 E8) (+ s1 s2))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (ox (if (> t2 d) (- t2 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i4 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u50000000 u50000000 (s2e in) none))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token get-balance tx-sender)) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o4 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token E8 (s2e in) none))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token u50000000 u50000000 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.age000-governance-token get-balance tx-sender)) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c5) (let ((p1 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u50000000 u50000000))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc E8))) (x1 (s2e (get balance-x p1))) (y1 (s2e (get balance-y p1))) (f1 (get fee-rate-x p1)) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (z (/ (* (/ (* E8 y1) x1) y2) x2)) (e (+ f1 f2)) (pe (if (< z E8) (+ z e) (- z e))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) y2)) (s (/ (* E8 E8) (+ s1 s2))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (ox (if (> t2 d) (- t2 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i5 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u50000000 u50000000 (s2e in) none))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc E8 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o5 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc E8 (s2e in) none))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u50000000 u50000000 (unwrap-panic (contract-call? 'SP3DX3H4FEYZJZ586MFBS25ZW3HZDMEW92260R2PR.Wrapped-Bitcoin get-balance tx-sender)) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c6 (bp (buff 10))) (let ((p1 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc E8))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc E8))) (x1 (s2e (get balance-x p1))) (y1 (s2e (get balance-y p1))) (f1 (get fee-rate-x p1)) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (z (/ (* (/ (* E8 y1) x1) y2) x2)) (fe (buff-to-uint-be (unwrap-panic (slice? bp u1 u2)))) (ff (< fe u100)) (fs (* u10000 (buff-to-uint-be (unwrap-panic (slice? bp u2 u3))))) (e (+ f1 f2 (* u10000 (mod fe u100)))) (pe (if (< z E8) (if ff (+ z e fs) (- (+ z e) fs)) (if ff (+ (- z e) fs) (- z e fs)))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) y2)) (s (/ (* E8 E8) (+ s1 s2))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (ox (if (> t2 d) (- t2 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i6 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc E8 (s2e in) none ))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u5000000 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc get-balance tx-sender)) none ))) (t3 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc E8 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc get-balance tx-sender)) none ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o6 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc E8 (s2e in) none ))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc u5000000 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc get-balance tx-sender)) none ))) (t3 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc E8 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wbtc get-balance tx-sender)) none ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c7) (let ((p1 (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-core get-pool u3))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc E8))) (x1 (s2e (get reserve0 p1))) (y1 (get reserve1 p1)) (f1 (- E8 (/ (* E8 (get num (get swap-fee p1))) (get den (get swap-fee p1))))) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (z (/ (* (/ (* E8 y1) x1) y2) x2)) (e (+ f1 f2)) (pe (if (< z E8) (+ z e) (- z e))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) y2)) (s (/ (* E8 E8) (+ s1 s2))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (ox (if (> t2 d) (- t2 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i7 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u3 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 ))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc E8 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc get-balance tx-sender)) none ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o7 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc E8 (s2e in) none ))) (t2 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u3 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-abtc get-balance tx-sender)) u1 ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c8) (let ((p1 (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-core get-pool u6))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-waeusdc E8))) (x1 (s2e (get reserve0 p1))) (y1 (s2e (get reserve1 p1))) (f1 (- E8 (/ (* E8 (get num (get swap-fee p1))) (get den (get swap-fee p1))))) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (z (/ (* (/ (* E8 y1) x1) y2) x2)) (e (+ f1 f2)) (pe (if (< z E8) (+ z e) (- z e))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) y2)) (s (/ (* E8 E8) (+ s1 s2))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (ox (if (> t2 d) (- t2 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i8 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 ))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-waeusdc E8 (s2e (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender))) none ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o8 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-waeusdc E8 (s2e in) none ))) (t2 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c9 (bp (buff 10))) (let ((p1 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt E8))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u50000000 u50000000))) (x1 (get balance-x p1)) (y1 (get balance-y p1)) (f1 (get fee-rate-x p1)) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (z (/ (* (/ (* E8 y1) x1) y2) x2)) (fe (buff-to-uint-be (unwrap-panic (slice? bp u3 u4)))) (ff (< fe u100)) (fs (* u10000 (buff-to-uint-be (unwrap-panic (slice? bp u4 u5))))) (e (+ f1 f2 (* u10000 (mod fe u100)))) (pe (if (< z E8) (if ff (+ z e fs) (- (+ z e) fs)) (if ff (+ (- z e) fs) (- z e fs)))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) y2)) (s (/ (* E8 E8) (+ s1 s2))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (ox (if (> t2 d) (- t2 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i9 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt E8 (s2e in) none ))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt get-balance tx-sender)) none ))) (t3 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u50000000 u50000000 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd get-balance tx-sender)) none ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o9 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.fixed-weight-pool-v1-01 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u50000000 u50000000 (s2e in) none ))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd u5000000 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wxusd get-balance tx-sender)) none ))) (t3 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt E8 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-susdt get-balance tx-sender)) none ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c10) (let ((p1 (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-core get-pool u11))) (p2 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 get-pool-details 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wpepe E8))) (x1 (s2e (get reserve0 p1))) (y1 (* (get reserve1 p1) u100000)) (f1 (- E8 (/ (* E8 (get num (get swap-fee p1))) (get den (get swap-fee p1))))) (x2 (get balance-y p2)) (y2 (get balance-x p2)) (f2 (get fee-rate-y p2)) (z (/ (* (/ (* E8 y1) x1) y2) x2)) (e (+ f1 f2 u50000)) (pe (if (< z E8) (+ z e) (- z e))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) y2)) (s (/ (* E8 E8) (+ s1 s2))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (ox (if (> t2 d) (- t2 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i10 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 ))) (t2 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-y-for-x 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wpepe E8 (unwrap-panic (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wpepe get-balance tx-sender)) none ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o10 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.amm-swap-pool-v1-1 swap-x-for-y 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wstx 'SP3K8BC0PPEVCV7NZ6QSRWPQ2JE9E5B6N3PA0KBR9.token-wpepe E8 (s2e in) none ))) (t2 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u11 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.tokensoft-token-v4k68639zxz get-balance tx-sender)) u1 ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c11) (let ((p1 (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token)))) (p2 (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token)))) (p3 (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token)))) (x1 (s2e (get balance-x p1))) (y1 (s2e (get balance-y p1))) (f1 u300000) (x2 (s2e (get balance-y p2))) (y2 (s2e (get balance-x p2))) (f2 f1) (x3 (s2e (get balance-y p3))) (y3 (s2e (get balance-x p3))) (f3 f1) (z (/ (* (/ (* (/ (* E8 y1) x1) y2) x2) y3) x3)) (e (+ f1 f2 f3)) (pe (if (< z E8) (+ z e) (- z e))) (p (if (< z E8) (if (< pe E8) (- E8 pe) u0) (if (> pe E8) (- pe E8) u0))) (s1 (/ (* E8 E8) x1)) (s2 (/ (* E8 E8) (/ (* x1 y2) x2))) (s3 (/ (* E8 E8) y3)) (s (/ (* E8 E8) (+ s1 s2 s3))) (d (/ (* s p) (* E8 u2))) (d1 (/ (* d (- E8 f1)) E8)) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (/ (* t1 (- E8 f2)) E8)) (t2 (/ (* d2 y2) (+ d2 x2))) (d3 (/ (* t2 (- E8 f3)) E8)) (t3 (/ (* d3 y3) (+ d3 x3))) (ox (if (> t3 d) (- t3 d) u0))) (ok {d:d,i:(> z E8),o:z,p:(/ (* d p) (* u2 E8)),ox:ox}))) (define-public (i11 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0))) (t2 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0))) (t3 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o11 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token in u0))) (t2 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-token get-balance tx-sender)) u0))) (t3 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (ca (bp (buff 10))) (let ((th u100000) (p1 (unwrap-panic (c1))) (s1 (/ (get d p1) E2)) (r1 (if (and (> s1 u0) (> (get ox p1) th)) (if (get i p1) (i1 s1) (o1 s1)) (err u0))) (p2 (unwrap-panic (c2))) (s2 (/ (get d p2) E2)) (r2 (if (and (> s2 u0) (> (get ox p2) th)) (if (get i p2) (i2 s2) (o2 s2)) (err u0))) (p3 (unwrap-panic (c3))) (s3 (/ (get d p3) E2)) (r3 (if (and (> s3 u0) (> (get ox p3) th)) (if (get i p3) (i3 s3) (o3 s3)) (err u0))) (p4 (unwrap-panic (c4))) (s4 (/ (get d p4) E2)) (r4 (if (and (> s4 u0) (> (get ox p4) th)) (if (get i p4) (i4 s4) (o4 s4)) (err u0))) (p5 (unwrap-panic (c5))) (s5 (/ (get d p5) E2)) (r5 (if (and (> s5 u0) (> (get ox p5) th)) (if (get i p5) (i5 s5) (o5 s5)) (err u0))) (p6 (unwrap-panic (c6 bp))) (s6 (/ (get d p6) E2)) (r6 (if (and (> s6 u0) (> (get ox p6) th)) (if (get i p6) (i6 s6) (o6 s6)) (err u0))) (p7 (unwrap-panic (c7))) (s7 (/ (get d p7) E2)) (r7 (if (and (> s7 u0) (> (get ox p7) th)) (if (get i p7) (i7 s7) (o7 s7)) (err u0))) (p8 (unwrap-panic (c8))) (s8 (/ (get d p8) E2)) (r8 (if (and (> s8 u0) (> (get ox p8) th)) (if (get i p8) (i8 s8) (o8 s8)) (err u0))) (p9 (unwrap-panic (c9 bp))) (s9 (/ (get d p9) E2)) (r9 (if (and (> s9 u0) (> (get ox p9) th)) (if (get i p9) (i9 s9) (o9 s9)) (err u0))) (p10 (unwrap-panic (c10))) (s10 (/ (get d p10) E2)) (r10 (if (and (> s10 u0) (> (get ox p10) th)) (if (get i p10) (i10 s10) (o10 s10)) (err u0))) (p11 (unwrap-panic (c11))) (s11 (/ (get d p11) E2)) (r11 (if (and (> s11 u0) (> (get ox p11) th)) (if (get i p11) (i11 s11) (o11 s11)) (err u0)))) (ok (list (merge p1 {r:r1}) (merge p2 {r:r2}) (merge p3 {r:r3}) (merge p4 {r:r4}) (merge p5 {r:r5}) (merge p6 {r:r6}) (merge p7 {r:r7}) (merge p8 {r:r8}) (merge p9 {r:r9}) (merge p10 {r:r10}) (merge p11 {r:r11}))))) (define-map fm uint bool) (define-read-only (ms (c (tuple (c uint) (d uint) (i bool) (o uint) (ox uint) (p uint))) (s (tuple (c uint) (d uint) (i bool) (o uint) (ox uint) (p uint)))) (if (and (> (get ox c) (get ox s)) (> (get ox c) u500000) (> (get d c) u0) (not (is-some (map-get? fm (+ (* burn-block-height u100) (get c c)))))) c s)) (define-public (cm (bp (buff 10))) (let ((th u100000) (p1 (merge (unwrap-panic (c1)) {c:u1})) (p2 (merge (unwrap-panic (c2)) {c:u2})) (p3 (merge (unwrap-panic (c3)) {c:u3})) (p4 (merge (unwrap-panic (c4)) {c:u4})) (p5 (merge (unwrap-panic (c5)) {c:u5})) (p6 (merge (unwrap-panic (c6 bp)) {c:u6})) (p7 (merge (unwrap-panic (c7)) {c:u7})) (p8 (merge (unwrap-panic (c8)) {c:u8})) (p9 (merge (unwrap-panic (c9 bp)) {c:u9})) (p10 (merge (unwrap-panic (c10)) {c:u10})) (p11 (merge (unwrap-panic (c11)) {c:u11})) (rc (fold ms (list p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11) {c:u0,d:u0,i:true,o:u0,ox:u0,p:u0})) (cn (get c rc)) (c (stx-get-balance tx-sender)) (dx (/ (get d rc) E2)) (d (if (< dx c) dx c)) (rs (if (is-eq cn u0) (ok u0) (if (is-eq cn u1) (if (get i rc) (i1 d) (o1 d)) (if (is-eq cn u2) (if (get i rc) (i2 d) (o2 d)) (if (is-eq cn u3) (if (get i rc) (i3 d) (o3 d)) (if (is-eq cn u4) (if (get i rc) (i4 d) (o4 d)) (if (is-eq cn u5) (if (get i rc) (i5 d) (o5 d)) (if (is-eq cn u6) (if (get i rc) (i6 d) (o6 d)) (if (is-eq cn u7) (if (get i rc) (i7 d) (o7 d)) (if (is-eq cn u8) (if (get i rc) (i8 d) (o8 d)) (if (is-eq cn u9) (if (get i rc) (i9 d) (o9 d)) (if (is-eq cn u10) (if (get i rc) (i10 d) (o10 d)) (if (is-eq cn u11) (if (get i rc) (i11 d) (o11 d)) (err u0)))))))))))))) (k (* u10000000 (buff-to-uint-be (unwrap-panic (slice? bp u0 u1)))))) (if (is-err rs) (map-set fm (+ (* burn-block-height u100) (get c rc)) true) true) (and (> c k) (not (is-eq tx-sender VT)) (try! (stx-transfer? (- c k) tx-sender VT))) (ok {rc:rc,rs:rs}))) (define-public (swap-helper (b (buff 10))) (cm b)) (define-public (swap-helper-a (b (buff 10))) (cm b)) (define-public (swap-helper-b (b (buff 10))) (cm b)) (define-public (swap-helper-c (b (buff 10))) (cm b)) (define-public (swap-helper-d (b (buff 10))) (cm b)) (define-public (swap-helper-e (b (buff 10))) (cm b)) (define-public (swap-multiple (b (buff 10))) (ca b)) (define-public (swap-multiple-v1 (b (buff 10))) (ca b)) (define-public (swap-multiple-v2 (b (buff 10))) (ca b)) (define-public (swap-multiple-v3 (b (buff 10))) (ca b)) (define-public (swap-multiple-v4 (b (buff 10))) (ca b)) (define-public (swap-multiple-v5 (b (buff 10))) (ca b)) (define-public (swap-multiple-v6 (b (buff 10))) (ca b)) (define-public (swap-multiple-v7 (b (buff 10))) (ca b)) (define-public (swap-multiple-v8 (b (buff 10))) (ca b)) (define-public (swap-multiple-v9 (b (buff 10))) (ca b)) (define-public (swap-multiple-v10 (b (buff 10))) (ca b))