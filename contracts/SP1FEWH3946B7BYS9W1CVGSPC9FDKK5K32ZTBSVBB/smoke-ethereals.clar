;; smoke-ethereals
;; contractType: public

(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)

(define-non-fungible-token smoke-ethereals uint)

;; Constants
(define-constant DEPLOYER tx-sender)
(define-constant COMM u1000)
(define-constant COMM-ADDR 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S)

(define-constant ERR-NO-MORE-NFTS u100)
(define-constant ERR-NOT-ENOUGH-PASSES u101)
(define-constant ERR-PUBLIC-SALE-DISABLED u102)
(define-constant ERR-CONTRACT-INITIALIZED u103)
(define-constant ERR-NOT-AUTHORIZED u104)
(define-constant ERR-INVALID-USER u105)
(define-constant ERR-LISTING u106)
(define-constant ERR-WRONG-COMMISSION u107)
(define-constant ERR-NOT-FOUND u108)
(define-constant ERR-PAUSED u109)
(define-constant ERR-MINT-LIMIT u110)
(define-constant ERR-METADATA-FROZEN u111)
(define-constant ERR-AIRDROP-CALLED u112)
(define-constant ERR-NO-MORE-MINTS u113)
(define-constant ERR-INVALID-PERCENTAGE u114)

;; Internal variables
(define-data-var mint-limit uint u508)
(define-data-var last-id uint u1)
(define-data-var total-price uint u3000000)
(define-data-var artist-address principal 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB)
(define-data-var ipfs-root (string-ascii 80) "ipfs://ipfs/QmcZ16syE148WNEhfLKrK2PxUeQbQFke6RWeMR3gH72k1F/json/")
(define-data-var mint-paused bool true)
(define-data-var premint-enabled bool false)
(define-data-var sale-enabled bool false)
(define-data-var metadata-frozen bool false)
(define-data-var airdrop-called bool false)
(define-data-var mint-cap uint u0)

(define-map mints-per-user principal uint)
(define-map mint-passes principal uint)

(define-public (claim) 
  (mint (list true)))

(define-public (claim-two) (mint (list true true)))

(define-public (claim-three) (mint (list true true true)))

(define-public (claim-four) (mint (list true true true true)))

(define-public (claim-five) (mint (list true true true true true)))

;; Mintpass Minting
(define-private (mint (orders (list 25 bool)))
  (let 
    (
      (passes (get-passes tx-sender))
    )
    (if (var-get premint-enabled)
      (begin
        (asserts! (>= passes (len orders)) (err ERR-NOT-ENOUGH-PASSES))
        (map-set mint-passes tx-sender (- passes (len orders)))
        (mint-many orders)
      )
      (begin
        (asserts! (var-get sale-enabled) (err ERR-PUBLIC-SALE-DISABLED))
        (mint-many orders)
      )
    )))

(define-private (mint-many (orders (list 25 bool )))  
  (let 
    (
      (last-nft-id (var-get last-id))
      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))
      (art-addr (var-get artist-address))
      (id-reached (fold mint-many-iter orders last-nft-id))
      (price (* (var-get total-price) (- id-reached last-nft-id)))
      (total-commission (/ (* price COMM) u10000))
      (current-balance (get-balance tx-sender))
      (total-artist (- price total-commission))
      (capped (> (var-get mint-cap) u0))
      (user-mints (get-mints tx-sender))
    )
    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))
    (asserts! (or (not capped) (is-eq tx-sender DEPLOYER) (is-eq tx-sender art-addr) (>= (var-get mint-cap) (+ (len orders) user-mints))) (err ERR-NO-MORE-MINTS))
    (map-set mints-per-user tx-sender (+ (len orders) user-mints))
    (if (or (is-eq tx-sender art-addr) (is-eq tx-sender DEPLOYER) (is-eq (var-get total-price) u0000000))
      (begin
        (var-set last-id id-reached)
        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))
      )
      (begin
        (var-set last-id id-reached)
        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))
        (try! (stx-transfer? total-artist tx-sender (var-get artist-address)))
        (try! (stx-transfer? total-commission tx-sender COMM-ADDR))
      )    
    )
    (ok id-reached)))

(define-private (mint-many-iter (ignore bool) (next-id uint))
  (if (<= next-id (var-get mint-limit))
    (begin
      (unwrap! (nft-mint? smoke-ethereals next-id tx-sender) next-id)
      (+ next-id u1)    
    )
    next-id))

(define-public (set-artist-address (address principal))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (ok (var-set artist-address address))))

(define-public (set-price (price uint))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (ok (var-set total-price price))))

(define-public (toggle-pause)
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (ok (var-set mint-paused (not (var-get mint-paused))))))

(define-public (set-mint-limit (limit uint))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))
    (ok (var-set mint-limit limit))))

(define-public (burn (token-id uint))
  (begin 
    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))
    (nft-burn? smoke-ethereals token-id tx-sender)))

(define-private (is-owner (token-id uint) (user principal))
    (is-eq user (unwrap! (nft-get-owner? smoke-ethereals token-id) false)))

(define-public (set-base-uri (new-base-uri (string-ascii 80)))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))
    (print { notification: "token-metadata-update", payload: { token-class: "nft", contract-id: (as-contract tx-sender) }})
    (var-set ipfs-root new-base-uri)
    (ok true)))

(define-public (freeze-metadata)
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (var-set metadata-frozen true)
    (ok true)))

(define-public (reveal-artwork (new-base-uri (string-ascii 80)))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))
    (var-set ipfs-root new-base-uri)
    (ok true)))
;; Non-custodial SIP-009 transfer function
(define-public (transfer (id uint) (sender principal) (recipient principal))
  (begin
    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))
    (trnsfr id sender recipient)))

;; read-only functions
(define-read-only (get-owner (token-id uint))
  (ok (nft-get-owner? smoke-ethereals token-id)))

(define-read-only (get-last-token-id)
  (ok (- (var-get last-id) u1)))

(define-read-only (get-token-uri (token-id uint))
  (ok (some (concat (concat (var-get ipfs-root) "{id}") ".json"))))

(define-read-only (get-paused)
  (ok (var-get mint-paused)))

(define-read-only (get-price)
  (ok (var-get total-price)))

(define-read-only (get-artist-address)
  (ok (var-get artist-address)))

(define-read-only (get-mints (caller principal))
  (default-to u0 (map-get? mints-per-user caller)))

(define-read-only (get-mint-limit)
  (ok (var-get mint-limit)))

(define-data-var license-uri (string-ascii 80) "https://arweave.net/zmc1WTspIhFyVY82bwfAIcIExLFH5lUcHHUN0wXg4W8/5")
(define-data-var license-name (string-ascii 40) "PERSONAL-NO-HATE")

(define-read-only (get-license-uri)
  (ok (var-get license-uri)))
  
(define-read-only (get-license-name)
  (ok (var-get license-name)))
  
(define-public (set-license-uri (uri (string-ascii 80)))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (ok (var-set license-uri uri))))
    
(define-public (set-license-name (name (string-ascii 40)))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (ok (var-set license-name name))))

;; Non-custodial marketplace extras
(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)

(define-map token-count principal uint)
(define-map market uint {price: uint, commission: principal, royalty: uint})

(define-read-only (get-balance (account principal))
  (default-to u0
    (map-get? token-count account)))

(define-private (trnsfr (id uint) (sender principal) (recipient principal))
  (match (nft-transfer? smoke-ethereals id sender recipient)
    success
      (let
        ((sender-balance (get-balance sender))
        (recipient-balance (get-balance recipient)))
          (map-set token-count
            sender
            (- sender-balance u1))
          (map-set token-count
            recipient
            (+ recipient-balance u1))
          (ok success))
    error (err error)))

(define-private (is-sender-owner (id uint))
  (let ((owner (unwrap! (nft-get-owner? smoke-ethereals id) false)))
    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))

(define-read-only (get-listing-in-ustx (id uint))
  (map-get? market id))

(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))
  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))
    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))
    (map-set market id listing)
    (print (merge listing {a: "list-in-ustx", id: id}))
    (ok true)))

(define-public (unlist-in-ustx (id uint))
  (begin
    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))
    (map-delete market id)
    (print {a: "unlist-in-ustx", id: id})
    (ok true)))

(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))
  (let ((owner (unwrap! (nft-get-owner? smoke-ethereals id) (err ERR-NOT-FOUND)))
      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))
      (price (get price listing))
      (royalty (get royalty listing)))
    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))
    (try! (stx-transfer? price tx-sender owner))
    (try! (pay-royalty price royalty))
    (try! (contract-call? comm-trait pay id price))
    (try! (trnsfr id owner tx-sender))
    (map-delete market id)
    (print {a: "buy-in-ustx", id: id})
    (ok true)))
    
(define-data-var royalty-percent uint u500)

(define-read-only (get-royalty-percent)
  (ok (var-get royalty-percent)))

(define-public (set-royalty-percent (royalty uint))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))
    (ok (var-set royalty-percent royalty))))

(define-private (pay-royalty (price uint) (royalty uint))
  (let (
    (royalty-amount (/ (* price royalty) u10000))
  )
  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))))
    (try! (stx-transfer? royalty-amount tx-sender (var-get artist-address)))
    (print false)
  )
  (ok true)))

;; Extra functionality required for mintpass
(define-public (toggle-sale-state)
  (let 
    (
      ;; (premint (not (var-get premint-enabled)))
      (sale (not (var-get sale-enabled)))
    )
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (var-set premint-enabled false)
    (var-set sale-enabled sale)
    (print { sale: sale })
    (ok true)))

(define-public (enable-premint)
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (ok (var-set premint-enabled true))))

(define-public (disable-premint)
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (ok (var-set premint-enabled false))))

(define-read-only (get-passes (caller principal))
  (default-to u0 (map-get? mint-passes caller)))

(define-read-only (get-premint-enabled)
  (ok (var-get premint-enabled)))

(define-read-only (get-sale-enabled)
  (ok (var-get sale-enabled)))  

(map-set mint-passes 'SP3QQTDTWDCCJ6H46FG89RBMTD0DN75YRP036VJ8M u1)
(map-set mint-passes 'SPR22N6GMB8J3348WAZY5T574BBH8S9N0JMMXEGG u1)
(map-set mint-passes 'SP27PNEMKF9ES4CWY6YQDWG84R0SCDAX557GG2KJQ u1)
(map-set mint-passes 'SP17SE4YQQJHB33ENGPDREXC8B6EEN7B3YN6ENFEA u1)
(map-set mint-passes 'SP8MFPC1BXT9EH574QDQ870KSS0GYQ8SV96326XS u1)
(map-set mint-passes 'SP21ZJKK258XE93SG4Z2RWCBK40HKJ6ZEC8EASTSM u1)
(map-set mint-passes 'SP2NY85MWHQHCAA6GM643N86QJ1TJDGTJC6E0KK8J u1)
(map-set mint-passes 'SP1SK4F2DP3BQQR8GVHBP5V8HF17ACHQF3S9G3M5J u1)
(map-set mint-passes 'SP2WJKVGNMZVYXTH1R3HPQPR92YMGB89CWCQR95XR u1)
(map-set mint-passes 'SP185GBZWQNGFZ5FSRZCV3QFPE2CSXHAB85D2A1R7 u1)
(map-set mint-passes 'SP17FY9Y3D55040H4XJ9SBQ0FPR1CBPPS3MWWV76N u1)
(map-set mint-passes 'SP3EWTYXVSJNXCTR4F9EPGBRE5E7QNM70XVRQ863E u1)
(map-set mint-passes 'SP2X9EEZHG5XFWPZNTVW8ZBK7XG3QY108YN172ZQG u1)
(map-set mint-passes 'SP3H5HHTJBHRM5E6GP701805JKCABENEV1MWM06X7 u1)
(map-set mint-passes 'SP2WBCM4PA71PE5XCTJNXS732JJ9NSP9GQY55234T u1)
(map-set mint-passes 'SP32NXCCJYPHBMHK3X4FE3RTMVZ5VZYV453KQSZG3 u1)
(map-set mint-passes 'SP2WQNM1AGPVPMTE6W1HAEA5ZBN37ZYRPAWQTWFDH u1)
(map-set mint-passes 'SP2X66PE944JJ2SYZ3PF9Y6VT1XEB0WFB7S34ZDBF u1)
(map-set mint-passes 'SP134QM0DZE506RJZY76MRA669S0QN9DP1PX8MR3G u1)
(map-set mint-passes 'SP2JHA3N4AK7GCF24SGFV4VJTK1B35NGT6DA1091 u1)
(map-set mint-passes 'SP1JT9E5JR29375CDW2KZQKFCVGPRJRZG58SSTYB u1)
(map-set mint-passes 'SP2GEMYXS3NK9VBFNQHEXCFAAYZQBPX5Y5PCTZVZW u1)
(map-set mint-passes 'SP27HYZ123VKVEXQDBA7D9R98J6EY7YN5621EQC97 u1)
(map-set mint-passes 'SP2YQ9AJSMD0QM7ERC0HJN091NVSKQFJMF9MV8ZQ6 u1)
(map-set mint-passes 'SP39NJ79BTZNZMJ7PAZQMCS1930NQ1SAAWV0A2DS0 u1)
(map-set mint-passes 'SP4YVN12741B6W69TESY274NXVTPAW7JVW6E16AN u1)
(map-set mint-passes 'SP15WE5ESVFP2SESNMJYJBVXP47BFWQAW0M3BZCCQ u1)
(map-set mint-passes 'SP3Z64F6A9Y8S46Q29S6ZP03BYRDYH6CW1CZB2SWZ u1)
(map-set mint-passes 'SP1J7K66WW51185S8P9CPF41VJ2Q8Z3S22DG1N0NM u1)
(map-set mint-passes 'SP3HTSZ0YH5FWN1VKTQN0GC4XGSEWRT53WJ0YSB0N u1)
(map-set mint-passes 'SP2XR9MGRJN364FA5JFCKVSSGWT8QEZ8XPC49RV7M u1)
(map-set mint-passes 'SP10JTZ4FJD4HT5D3MWKWJ3JVM8QGXRMFB3SVZSNX u1)
(map-set mint-passes 'SP1T73AAB44YYRAV4VD1GRFBPHRVZ8N7F9HXDVZW6 u1)
(map-set mint-passes 'SP2M71GCR3ZMKN7TBH6E7VKWMGT0N667AY917NX70 u1)
(map-set mint-passes 'SP2DMBXJ7V2M9EJEY13DNFY3RCG62XARGFSM2F8X8 u1)
(map-set mint-passes 'SP1B7JPNR8C2NJCDEX08Z67R3ZG3E1N3GPE3KPKTR u1)
(map-set mint-passes 'SPDAV1G8FQ0TMEWKVE0A9WS8RNDJ7K808X2MY22E u1)
(map-set mint-passes 'SP3GKESV1DZAMC5M889D1X1YRG368ZH3BSATYCQJW u1)
(map-set mint-passes 'SP1YAETQRC0K6DTA9T1N1A0HEEJT5K48H006RMYAJ u1)
(map-set mint-passes 'SP3QDSD1A3ENPBV1ADVAF6V75G32Q9AAC5ZCGBD53 u1)
(map-set mint-passes 'SP3CW47S6Q8RMDREB5F3NES6JSAD5RY3BF1NB1AA u1)
(map-set mint-passes 'SPR22N6GMB8J3348WAZY5T574BBH8S9N0JMMXEGG u1)
(map-set mint-passes 'SP94TMN67VJK1XYH932RG31CR8MPZPMYESCMECT6 u1)
(map-set mint-passes 'SP3YA87GA9CDB9ZEGJEESNVF1ZT5NXB9T7WE738JM u1)
(map-set mint-passes 'SP28BVZ1W197Y46FJDP4FYTQ8TR9N3ZY5C6MBCNH5 u1)
(map-set mint-passes 'SP2BZXB1JBVTRBPTEK2SVNQRR8AXP3PF3B403A5D1 u1)
(map-set mint-passes 'SPBXDZD8ZCSB8YA0YFS15MZ8CMJTDAMTNSWFMJKR u1)
(map-set mint-passes 'SP233A91ZN40G7PPF7QFB68SKP576S81QCZRXY4PA u1)
(map-set mint-passes 'SP2YXYDYGA2FAV4192TDNWJWFDMSP4SJGBQA46N50 u1)
(map-set mint-passes 'SP2DMBXJ7V2M9EJEY13DNFY3RCG62XARGFSM2F8X8 u1)
(map-set mint-passes 'SP3QQTDTWDCCJ6H46FG89RBMTD0DN75YRP036VJ8M u1)
(map-set mint-passes 'SPWGCBQS5MAYVAS0YQE0ASRVMGGH6XKNPJM0AND3 u1)
(map-set mint-passes 'SPRD9G5J0VMPH1Q4NDFEVHB1RBEFGDN443TKDJSJ u1)
(map-set mint-passes 'SP2DMBXJ7V2M9EJEY13DNFY3RCG62XARGFSM2F8X8 u1)
(map-set mint-passes 'SP3M6A7Q690PEAYRBBM4R6MSBSW6AD3N633YQTK2 u1)
(map-set mint-passes 'SPHK8A7P61C6ASWKYDX1PCDX9YA54DKVJN49EXGJ u1)
(map-set mint-passes 'SPHZW8N7EMXHY7N72JNE2EE1TD4Z1FZ8GENAHYFS u1)
(map-set mint-passes 'SP3RNSP3JHYMV4R0H1XKJ8233B39V66H7MSN9615J u1)
(map-set mint-passes 'SP3HYWH6DHKXW9J0A1VDWJFCPRG336B0MT3RF8BYP u1)
(map-set mint-passes 'SPWBPJWHWS3BCEYM6JJHT3FKY9SB799MVV4D9KQD u1)
(map-set mint-passes 'SP1V0XC53N5KD9736VVMEN9C9ARHDXCM6A45JQWT0 u1)
(map-set mint-passes 'SP1Y8SSCR6VY6W8G9G1PZC7YEAMCXBCDVXBQF2162 u1)
(map-set mint-passes 'SP3Q73AN89QFXFD7BX10JYXZNR3J1HPVV2YC45PK3 u1)
(map-set mint-passes 'SP2PFBD7VSRGJPFVSYYTDGP69DTX72C7J40TMV4T1 u1)
(map-set mint-passes 'SP6TWKW14KCRPKYR2D5GWN9PW1C3KD79MJCZ5HQ2 u1)
(map-set mint-passes 'SP3WAAYXPC6WZNEC7SHGR36D32RJPZVXRR1BG0QSY u1)
(map-set mint-passes 'SPXSVE29RTDCQ0X26G9CGB0ZR1QJT197B2NJSPY7 u1)
(map-set mint-passes 'SP1DPNP3RRD6JG1557SP6JMX68W5BV6R2Z74BQEXV u1)
(map-set mint-passes 'SPSQ4W56BY5XKZR8YJMXYP1CKJ64TT4CQ04GFQT8 u1)
(map-set mint-passes 'SP3NJ4BR35W8002J0PWZY0QNG9FTYZ32H38Z0PV17 u1)
(map-set mint-passes 'SP7VSKA0A73MJDXC1DMABBFBTJPG40TM4CX1SRKD u1)
(map-set mint-passes 'SP34RJDQS2X6WMDGC84G4JHDV3S16DN3FPEA75NEE u1)
(map-set mint-passes 'SP2KY7F21EWVRKJ2BQSMJTP68DDFCQ7BGKXJ50RGW u1)
(map-set mint-passes 'SP2ERDW562DCZFY3F8GCPN4KZCEZGYH8P1XYNTYQ1 u1)
(map-set mint-passes 'SP2664YJ6Z7AWGKSGYG3MSDCCR3ZZREX3JH14TCCE u1)
(map-set mint-passes 'SP28Y4PXJN9VH666KN75V76C1AAPFF9XQ34KKFT25 u1)
(map-set mint-passes 'SP3JFEKTFHVC3B9RRQ46FNC8MFRZPHVYYTFWYRX6W u1)
(map-set mint-passes 'SP2RNHHQDTHGHPEVX83291K4AQZVGWEJ7WCQQDA9R u1)
(map-set mint-passes 'SP27V65698KCKGJ899RXT2YX35S04HZRVZAG0CVXH u1)
(map-set mint-passes 'SP1VKGM7F55A1DRFC2EWWSKV84HEJGFK7W8KNZHH9 u1)
(map-set mint-passes 'SPGSDWYMSA6FTYPMV542D19FTZ73A7WPYXKF1QWE u1)
(map-set mint-passes 'SP27CHPGTJQJHBKVZ4M14PM30XDVKEJAAMBVTPVMR u1)
(map-set mint-passes 'SP2664YJ6Z7AWGKSGYG3MSDCCR3ZZREX3JH14TCCE u1)
(map-set mint-passes 'SP6Z9JWRJKA33SCF6Y3V70ZH3TM4P8568EPHDHZS u1)
(map-set mint-passes 'SP10AF5BKH6FE8ZZGBMFXHNYY4HX4WQHB7MTF46XV u1)
(map-set mint-passes 'SP3NG7TEEQAPM5KBYTBY94WBX7JZEJ323T7JVCK7A u1)
(map-set mint-passes 'SPY19VHTB5HANWK6NN99SR8M6GDA21P9JG64BDQ u1)
(map-set mint-passes 'SP1RH2SQM3Y3SFZBPH1WRQPZGB59DHDG8269370PA u1)
(map-set mint-passes 'SP1PKKPBB3K60S4PD7545H7JK8AH0MZJEV9T4X15K u1)
(map-set mint-passes 'SP2RNHHQDTHGHPEVX83291K4AQZVGWEJ7WCQQDA9R u1)
(map-set mint-passes 'SP2EQP7X0WCJ70ZMQYGPXAD0S9T76JH1CDZMEMQES u1)
(map-set mint-passes 'SP2WQV1YNPZYHF2MNJ4SDXBSCZSQVM86EKFNB5ACW u1)
(map-set mint-passes 'SPQFACZ5KGYJH3XG8BDWW2VGGRBJ8BPFVEXEVC6M u1)
(map-set mint-passes 'SP242WM1RTHV1WNZ763FNJRVMZB6KWJN9W51C58P5 u1)
(map-set mint-passes 'SPF55MFSRYBNADJT6HVNVA4JBMDGG8Y6R55Q0JA3 u1)
(map-set mint-passes 'SP2HDF5A0ZD2CG2SEE3NSVE9TCPFJ3Y14BQ8W997Z u1)
(map-set mint-passes 'SP3PPP9P4P45A6AW7AF8H0GZMW0YC6G26EAQKTBYA u1)
(map-set mint-passes 'SP3V9R4TBKQMCRSZNJWM2W9PGKTXBVH12C10AP7HD u1)
(map-set mint-passes 'SP2P8RJ42R8MP0AAJASTT7ST6VZ7GHCWR7PET3B21 u1)
(map-set mint-passes 'SP3KEAY4YFH2FT2E996G0PE89SWQHBPDQXHH04PTY u1)
(map-set mint-passes 'SP2Q1AZMQDWH3M8DHJHVE1FC261QJ6Z9RC9ET9HGH u1)
(map-set mint-passes 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ u1)
(map-set mint-passes 'SP2T717SNDGETK8RD0BY41E13FHDFDGBAWSXE5ADV u1)
(map-set mint-passes 'SP2YG82P7QQCHE9FK8EKAM9X1QM3FQTH2WA5P4J3V u1)
(map-set mint-passes 'SP3RNDPX6X3MNZMS3NV28AF6TXVFXDXCAJTTX78GG u1)
(map-set mint-passes 'SP1AQDVJF18XEFVXMWTRAW9TQ0N2DCN0178FKW03R u1)
(map-set mint-passes 'SP1PKZ3CQSC8RWFCJ1Z0Q4VE5BAF5E5V59PMPKFVY u1)
(map-set mint-passes 'SPSQ4W56BY5XKZR8YJMXYP1CKJ64TT4CQ04GFQT8 u1)
(map-set mint-passes 'SP2RQ0MJ95W7FTGBP321QN8ET2ZB2Y9AXRMX31FA u1)
(map-set mint-passes 'SP12HYT7PWZN09YZEDB6ZD5DCAY6RNQ519TCEATX5 u1)
(map-set mint-passes 'SP28Y4PXJN9VH666KN75V76C1AAPFF9XQ34KKFT25 u1)
(map-set mint-passes 'SP27V65698KCKGJ899RXT2YX35S04HZRVZAG0CVXH u1)
(map-set mint-passes 'SP2664YJ6Z7AWGKSGYG3MSDCCR3ZZREX3JH14TCCE u1)
(map-set mint-passes 'SPWR61YRMNPGX6JASY3ZR6SSE79ACV143YW1PCAN u1)
(map-set mint-passes 'SP26Z4AS2WHRMBAGN00THT4H936NNTDBZXT6B98K1 u1)
(map-set mint-passes 'SP29QAJG65AKFHRD23415HBPQG4QQ4H41YSDKP4HZ u1)
(map-set mint-passes 'SP34RJDQS2X6WMDGC84G4JHDV3S16DN3FPEA75NEE u1)
(map-set mint-passes 'SP3SYA6GERCVS6W1YT1W6YBTD8CT2B3VP1D3A3QXB u1)
(map-set mint-passes 'SPP757HGKTNKBQZ61ZDC2R6A5QM8HMY8SET8K752 u1)
(map-set mint-passes 'SP3FHMZ41DXTFRR7TG1GCS4D9FF87FSEDT26JQZS0 u1)
(map-set mint-passes 'SP2Q9Q0H3R4J2KZDFM2JC8AAYVBX2EJQRK4RKWJM u1)
(map-set mint-passes 'SP167MPT0WJHFVBEHPP4TMYRAC8KEWCPX3JNE6WNQ u1)
(map-set mint-passes 'SP29YN66DKM73J3Q2Z6AGDK0CJB4EQ7C6A9PQYB6M u1)
(map-set mint-passes 'SP3Q73AN89QFXFD7BX10JYXZNR3J1HPVV2YC45PK3 u1)
(map-set mint-passes 'SP1889KKCYAMBSEKTJFSH18B21DDWHW7CYFZ4N64W u1)
(map-set mint-passes 'SP2DAYHJS9HYT3ND88JSFJWVG0X1JS7JXA0NG02EZ u1)
(map-set mint-passes 'SP2YDZB938V1QNSRN2XCCP8YTWEXVC89HK9DFYDCP u1)
(map-set mint-passes 'SP2Z7Z7XK34MSQ5CBJKVR3JFZKTG448YDQZEETNWY u1)
(map-set mint-passes 'SPXFQBMJEYNN4AE861EK9HAH95FZ8PJMT0ZYAW22 u1)
(map-set mint-passes 'SPJNGNX5RBR9RDWWANG1AJ6A5RJKXMY32M0YK4SD u1)
(map-set mint-passes 'SP20QS4PBRFWRQFHVKQHBR3C8TETC6H89QMXBQB8M u1)
(map-set mint-passes 'SP354HAD087R3KEC2BPHBCDF26DAAN29YQKF68QXH u1)
(map-set mint-passes 'SP3CW47S6Q8RMDREB5F3NES6JSAD5RY3BF1NB1AA u1)
(map-set mint-passes 'SP2R6BM8W6712ZTNMC8TTSMYPK80AYM92ABVW6W7N u1)
(map-set mint-passes 'SP25CHNSCYYFZ7Q0FCZ5W6BGX0DK1NTEXY5A01PAB u1)
(map-set mint-passes 'SP3GNH97BCAK6303RC8P7WHWW9Y827MW53N0GX1AJ u1)
(map-set mint-passes 'SP2BCSDT8109R3P3S03VK5A4K0XNM0D1D1BCQ0FZ u1)
(map-set mint-passes 'SPGFD0M8C13TKSGX5PRB8A3SMAP77GD6BYSZV7N0 u1)
(map-set mint-passes 'SP3CCS5WZEVHSTSE3SQC493PNWS69PDBX6BJ1B743 u1)
(map-set mint-passes 'SP3QDSD1A3ENPBV1ADVAF6V75G32Q9AAC5ZCGBD53 u1)
(map-set mint-passes 'SPP5MFNYF9KC0EVBSM591MXW3ASBDW7WKS5F20WP u1)
(map-set mint-passes 'SP1B7JPNR8C2NJCDEX08Z67R3ZG3E1N3GPE3KPKTR u1)
(map-set mint-passes 'SP1QECSQXDCK5SD20T8YB6NK233DQ43G4X7PGAVCG u1)
(map-set mint-passes 'SP3GKESV1DZAMC5M889D1X1YRG368ZH3BSATYCQJW u1)
(map-set mint-passes 'SPKY3A6TS2YSF0QC98JWECP1GKXZ88R55KS6STKS u1)
(map-set mint-passes 'SP8V74T4PY9SHB36F1CM4KZTEMHSB0V8Z7VB8F9G u1)
(map-set mint-passes 'SP3259YBWJ5WP8JZS6YMD6MZVNZGZJ1HVWDA8RRYK u1)
(map-set mint-passes 'SP16H3TQGZFFYE760PXQPEF9MSKZ5VA80RFTK6JAY u1)
(map-set mint-passes 'SP2R936MFQFRR9VYEMF7QRNW31PPQM0P4Z2JJ7A7H u1)
(map-set mint-passes 'SP94TMN67VJK1XYH932RG31CR8MPZPMYESCMECT6 u1)
(map-set mint-passes 'SP28Z88WVBEW9MQ59GGJJ8D3VQQ7SMCW06Q21759Z u1)
(map-set mint-passes 'SP3MYZ2T7JA4GYBYMSZ4ZJYEYTZ69JDD0M7W4BQ8V u1)
(map-set mint-passes 'SP3J3WXWS5QTABAE0S14XX8BXPW76RJMADGAX3FR6 u5)
(map-set mint-passes 'SP1DRRSTERRYSMB2ES7PT5NB1N9QFR3XWJ2758GC4 u3)
(map-set mint-passes 'SP26SCAFR0J09N1W4VP45S2D5FRQZ257SQMMTT51H u1)
(map-set mint-passes 'SP31ZNSNSJK0R8Z8CRVKXFPWPC5A610SEA4XPBTQ7 u1)
(map-set mint-passes 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ u5)
(map-set mint-passes 'SP478D3W1RF3X6JK4GHJDZVPHVKQPY2NDXCY54R7 u1)
(map-set mint-passes 'SP3EMZ5XM95XZRVFWB5M8JH3VRMMPJ8661WTT1M3T u1)
(map-set mint-passes 'SP38JXDVKPJPV7GCDR1K9MCQYAWKJTQ7YF0S3F3F5 u1)
(map-set mint-passes 'SP19FW5TRXVHE700F0QDF8Q5GT2XMKTCAXDF6YSJB u3)
(map-set mint-passes 'SP1ZNQ2RVJAQ70ZM98R6CMXRM4KCTNPR0165A8V6Q u1)
(map-set mint-passes 'SP5TW8GY764TZ2HKVAQQ4Z1FB6K9GJ9CS82974XM u1)
(map-set mint-passes 'SP15TQ8ZC38KT0DBE1Z359KH7R8SX2QWJ0GTDT91X u1)
(map-set mint-passes 'SP1AQDVJF18XEFVXMWTRAW9TQ0N2DCN0178FKW03R u5)
(map-set mint-passes 'SP2ERDW562DCZFY3F8GCPN4KZCEZGYH8P1XYNTYQ1 u1)
(map-set mint-passes 'SP3JDZX69PD5Y4W2PY7XE2E9PW2R5GGKQ2Z7X39ZS u1)
(map-set mint-passes 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB u5)
(map-set mint-passes 'SP2RNHHQDTHGHPEVX83291K4AQZVGWEJ7WCQQDA9R u3)
(map-set mint-passes 'SP3AJC728JY0Y43E8RT6K4VDWPT265RDMXJ8M0VH0 u2)
(map-set mint-passes 'SP11Z0M9SXMXM2BGQHDPT0B9Z03TDE56WFSF6EEX8 u2)
(map-set mint-passes 'SPBWF76FHRNA9C1A6ZZ896B3XRRK5TGGW7X9A55A u1)
(map-set mint-passes 'SP13C1RMYQK1QKK4K5787SH0K975QTS70AZXEQ77C u1)
(map-set mint-passes 'SP1NTTJ1RK90T8A6FQD51ZBTQWX9E55E9XWFEYABX u1)
(map-set mint-passes 'SP1H9ZKGH940EH9V5JCHJW1XMH33ASTBTQ35W2NQ u1)
(map-set mint-passes 'SPPB155Z73HHGF2EDE1FPZDEM0NY65PTMQK17W75 u1)
(map-set mint-passes 'SP25SKSXDBBXDN1HR7151FBH81H6AXF0RKQPHK886 u1)
(map-set mint-passes 'SPSQ4W56BY5XKZR8YJMXYP1CKJ64TT4CQ04GFQT8 u1)
(map-set mint-passes 'SP2ZM0FFZGQ64SX8G287QJEPH2KYF0EZRDJ15PSYC u1)
(map-set mint-passes 'SP10HSK80JRJNB1DQH610KANEQAVSX18229Z7H9DX u1)
(map-set mint-passes 'SP2RNHHQDTHGHPEVX83291K4AQZVGWEJ7WCQQDA9R u1)
(map-set mint-passes 'SP3AJC728JY0Y43E8RT6K4VDWPT265RDMXJ8M0VH0 u1)
(map-set mint-passes 'SP327AMYAAJFHDSDGE6AD0HTACYQ4CCXJGT47M2H3 u1)
(map-set mint-passes 'SP11Z0M9SXMXM2BGQHDPT0B9Z03TDE56WFSF6EEX8 u1)
(map-set mint-passes 'SPBWF76FHRNA9C1A6ZZ896B3XRRK5TGGW7X9A55A u1)
;; Airdrop
(define-public (admin-airdrop)
  (let
    (
      (last-nft-id (var-get last-id))
    )
    (begin
      (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
      (asserts! (is-eq false (var-get airdrop-called)) (err ERR-AIRDROP-CALLED))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u0) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u1) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u2) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u3) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u4) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u5) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u6) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u7) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u8) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u9) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u10) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u11) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u12) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u13) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u14) 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB))
      (map-set token-count 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB (+ (get-balance 'SP1FEWH3946B7BYS9W1CVGSPC9FDKK5K32ZTBSVBB) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u15) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u16) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u17) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u18) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u19) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u20) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u21) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u22) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u23) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u24) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u25) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u26) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u27) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u28) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))
      (try! (nft-mint? smoke-ethereals (+ last-nft-id u29) 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ))
      (map-set token-count 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ (+ (get-balance 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ) u1))

      (var-set last-id (+ last-nft-id u30))
      (var-set airdrop-called true)
      (ok true))))