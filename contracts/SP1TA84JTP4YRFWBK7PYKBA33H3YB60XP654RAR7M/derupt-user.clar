";; .derupt-user Contract\n(impl-trait 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-user-trait.derupt-user-trait)\n;; Using sip-010-trait for dynamically transfering CityCoins and derupt-core-trait for validation purposes\n(use-trait sip-010-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)\n(use-trait derupt-core-trait 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-core-trait.derupt-core-trait)\n(use-trait derupt-user-trait 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-user-trait.derupt-user-trait)\n\n;; User Principal\n(define-constant APP_USER tx-sender)\n\n;; Error constants\n(define-constant unauthorized-user (err 100))\n(define-constant notfound (err 101))\n(define-constant validation-failed (err 102))\n(define-constant unauthorized-contract (err 103))\n\n;; Member activation map\n(define-map member-status principal bool)\n\n;; Get Derupt-core contract\n(define-private (get-derupt-core-contract)\n  (contract-call? 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-feed get-derupt-core-contract) \n)\n\n(define-private (get-chime-amount)\n  (contract-call? 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-feed get-chime-amount)  \n)\n\n(define-private (get-mine-amount)\n  (contract-call? 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-feed get-mine-amount)\n)\n\n(define-private (get-like-amount)\n  (contract-call? 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-feed get-like-amount)\n)\n\n(define-private (get-dislike-amount)\n  (contract-call? 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-feed get-dislike-amount)\n)\n;; validatation of core contract\n(define-private (validate-core-contract (contract principal))\n  (contract-call? 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-feed validate-core-contract contract)\n)\n\n;; Member activation\n(define-public (registration-activation (member principal))\n  (let \n    (\n      (caller (unwrap! (get name (unwrap! (principal-destruct? contract-caller) notfound)) notfound))\n    ) \n      (asserts! (is-eq tx-sender member) unauthorized-user)\n      (asserts! (is-eq caller \"derupt-members\") unauthorized-user)\n      (map-set member-status APP_USER true)\n      (ok true)\n  )\n)\n\n;; Get status via chain change\n(define-public (get-activation-status (member principal))\n  (begin\n    (asserts! (is-eq tx-sender member) unauthorized-user)\n    (ok (unwrap! (map-get? member-status APP_USER) notfound))\n  )\n)\n\n;; Get status via api\n(define-read-only (activation-status)\n  (ok (unwrap! (map-get? member-status APP_USER) notfound))\n)\n\n(define-public (activate-member (contract-address <derupt-user-trait>)) \n  (contract-call? 'SP3T3JC6V4S94PPB7WFEK17863HPG3EYP6CJ65E7M.derupt-members activate-member contract-address)\n)\n\n;; User Operation Send Message\n(define-public (send-message \n  (content (string-utf8 256)) (attachment-uri (optional (string-utf8 256))) \n  (thumbnail-uri (optional (string-utf8 256))) (reply-to (optional (string-utf8 256))) \n  (cityName (string-ascii 10)) (alt-origin (optional (string-utf8 256)))\n  (extras \n    (optional \n      { \n        arg0: (optional (string-utf8 256)),\n        arg1: (optional (string-utf8 256)),\n        arg2: (optional (string-utf8 256)),\n        arg3: (optional (string-utf8 256)),\n        arg4: (optional (string-utf8 256)),\n        arg5: (optional (string-utf8 256)),\n        arg6: (optional (string-utf8 256)),\n        arg7: (optional (string-utf8 256)),\n        arg8: (optional (string-utf8 256)),\n        arg9: (optional (string-utf8 256))\n      }\n    )\n  )\n  (core-contract <derupt-core-trait>)\n)           \n  (let \n    (\n      (derupt-core-contract (unwrap! (get-derupt-core-contract) notfound))\n      (chime-amount (unwrap! (get-chime-amount) notfound))\n      (mine-amount (unwrap! (get-mine-amount) notfound))\n      (inputed-core-contract (contract-of core-contract))\n    )            \n    (asserts! (is-eq tx-sender APP_USER) unauthorized-user)\n    (asserts! (unwrap! (validate-core-contract inputed-core-contract) validation-failed) unauthorized-contract)     \n    (is-ok (contract-call? core-contract send-message content attachment-uri thumbnail-uri reply-to cityName alt-origin extras))   \n    (print { event: \"send-message\", content: content, attachment-uri: attachment-uri, thumbnail-uri: thumbnail-uri, reply-to: reply-to, cityName: cityName, alt-origin: alt-origin, extras: extras, chime-amount: chime-amount, mine-amount: mine-amount})\n    (ok true)\n  )\n)\n\n;; User Operation Like Message\n(define-public (like-message \n  (author-principal principal) (liked-txid (string-utf8 256)) \n  (contractId <sip-010-trait>) (core-contract <derupt-core-trait>))    \n  (let \n    (\n      (derupt-core-contract (unwrap! (get-derupt-core-contract) notfound))\n      (like-amount (unwrap! (get-like-amount) notfound))\n      (inputed-core-contract (contract-of core-contract))\n    )      \n    (asserts! (unwrap! (validate-core-contract inputed-core-contract) validation-failed) unauthorized-contract)                \n    (is-ok (contract-call? core-contract like-message author-principal liked-txid contractId))\n    (print { author-principal: author-principal, liked-txid: liked-txid, like-amount: like-amount })\n    (ok true)\n  )\n)\n\n;; User Operation Dislike Message\n(define-public (dislike-message \n  (author-principal principal) (disliked-txid (string-utf8 256)) \n  (cityName (string-ascii 10)) (core-contract <derupt-core-trait>)) \n  (let \n    (\n      (derupt-core-contract (unwrap! (get-derupt-core-contract) notfound))\n      (inputed-core-contract (contract-of core-contract))\n      (dislike-amount (unwrap! (get-dislike-amount) notfound))\n    )\n    (asserts! (unwrap! (validate-core-contract inputed-core-contract) validation-failed) unauthorized-contract)      \n    (is-ok (contract-call? core-contract dislike-message author-principal disliked-txid cityName))\n    (print { author-principal: author-principal, disliked-txid: disliked-txid, dislike-amount: dislike-amount })\n    (ok true)  \n  )           \n)\n\n;; User Operation Favorable Reply Message\n(define-public (favorable-reply-message \n  (content (string-utf8 256)) (attachment-uri (optional (string-utf8 256))) \n  (thumbnail-uri (optional (string-utf8 256))) (reply-to (optional (string-utf8 256))) \n  (author-principal principal) (liked-txid (string-utf8 256)) \n  (cityName (string-ascii 10)) (alt-origin (optional (string-utf8 256))) \n  (extras \n    (optional \n      { \n        arg0: (optional (string-utf8 256)),\n        arg1: (optional (string-utf8 256)),\n        arg2: (optional (string-utf8 256)),\n        arg3: (optional (string-utf8 256)),\n        arg4: (optional (string-utf8 256)),\n        arg5: (optional (string-utf8 256)),\n        arg6: (optional (string-utf8 256)),\n        arg7: (optional (string-utf8 256)),\n        arg8: (optional (string-utf8 256)),\n        arg9: (optional (string-utf8 256))\n      }\n    )\n  )\n  (contractId <sip-010-trait>) \n  (core-contract <derupt-core-trait>))\n  (let \n    (\n      (derupt-core-contract (unwrap! (get-derupt-core-contract) notfound)) \n      (inputed-core-contract (contract-of core-contract))\n    )\n      (asserts! (unwrap! (validate-core-contract inputed-core-contract) validation-failed) unauthorized-contract)     \n      (is-ok (contract-call? core-contract favorable-reply-message content tx-sender  attachment-uri thumbnail-uri reply-to liked-txid cityName alt-origin contractId extras))\n      (print { content: content, publisher: tx-sender, attachment-uri: attachment-uri, thumbnail-uri: thumbnail-uri, reply-to: reply-to, cityName: cityName, alt-origin: alt-origin, contractId: contractId })\n      (ok true)\n  )\n)\n\n;; User Operation Favorable Reply Message\n(define-public (unfavorable-reply-message \n  (content (string-utf8 256)) (attachment-uri (optional (string-utf8 256))) \n  (thumbnail-uri (optional (string-utf8 256))) (reply-to (optional (string-utf8 256))) \n  (author-principal principal) (liked-txid (string-utf8 256)) \n  (cityName (string-ascii 10)) (alt-origin (optional (string-utf8 256))) \n  (extras \n    (optional \n      { \n        arg0: (optional (string-utf8 256)),\n        arg1: (optional (string-utf8 256)),\n        arg2: (optional (string-utf8 256)),\n        arg3: (optional (string-utf8 256)),\n        arg4: (optional (string-utf8 256)),\n        arg5: (optional (string-utf8 256)),\n        arg6: (optional (string-utf8 256)),\n        arg7: (optional (string-utf8 256)),\n        arg8: (optional (string-utf8 256)),\n        arg9: (optional (string-utf8 256))\n      }\n    )\n  )\n  (contractId <sip-010-trait>) \n  (core-contract <derupt-core-trait>))\n  (let \n    (\n      (derupt-core-contract (unwrap! (get-derupt-core-contract) notfound)) \n      (inputed-core-contract (contract-of core-contract))\n    )\n    (asserts! (unwrap! (validate-core-contract inputed-core-contract) validation-failed) unauthorized-contract)      \n    (is-ok (contract-call? core-contract favorable-reply-message content tx-sender  attachment-uri thumbnail-uri reply-to liked-txid cityName alt-origin contractId extras))\n    (print { content: content, publisher: tx-sender, attachment-uri: attachment-uri, thumbnail-uri: thumbnail-uri, reply-to: reply-to, cityName: cityName, alt-origin: alt-origin})\n    (ok true)\n  )\n)\n\n(map-insert member-status APP_USER false)"