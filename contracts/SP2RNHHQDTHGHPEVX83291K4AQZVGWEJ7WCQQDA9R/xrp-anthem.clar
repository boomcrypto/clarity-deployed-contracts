;; xrp-anthem
;; contractType: public

(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)

(define-non-fungible-token xrp-anthem uint)

;; Constants
(define-constant DEPLOYER tx-sender)
(define-constant COMM u1000)
(define-constant COMM-ADDR 'SPNWZ5V2TPWGQGVDR6T7B6RQ4XMGZ4PXTEE0VQ0S)

(define-constant ERR-NO-MORE-NFTS u100)
(define-constant ERR-NOT-ENOUGH-PASSES u101)
(define-constant ERR-PUBLIC-SALE-DISABLED u102)
(define-constant ERR-CONTRACT-INITIALIZED u103)
(define-constant ERR-NOT-AUTHORIZED u104)
(define-constant ERR-INVALID-USER u105)
(define-constant ERR-LISTING u106)
(define-constant ERR-WRONG-COMMISSION u107)
(define-constant ERR-NOT-FOUND u108)
(define-constant ERR-PAUSED u109)
(define-constant ERR-MINT-LIMIT u110)
(define-constant ERR-METADATA-FROZEN u111)
(define-constant ERR-AIRDROP-CALLED u112)
(define-constant ERR-NO-MORE-MINTS u113)
(define-constant ERR-INVALID-PERCENTAGE u114)

;; Internal variables
(define-data-var mint-limit uint u1)
(define-data-var last-id uint u1)
(define-data-var total-price uint u0)
(define-data-var artist-address principal 'SPAE4SFGGSKKH7NC49KQCHJFY9159DG24YHQCJVX)
(define-data-var ipfs-root (string-ascii 80) "ipfs://ipfs/QmdKkgZMjShToBHvaNqNQzVnerFEY1BkQVAStqFq2qvFVQ/json/")
(define-data-var mint-paused bool true)
(define-data-var premint-enabled bool false)
(define-data-var sale-enabled bool false)
(define-data-var metadata-frozen bool false)
(define-data-var airdrop-called bool false)
(define-data-var mint-cap uint u0)

(define-map mints-per-user principal uint)
(define-map mint-passes principal uint)

(define-public (claim) 
  (mint (list true)))

;; Mintpass Minting
(define-private (mint (orders (list 25 bool)))
  (let 
    (
      (passes (get-passes tx-sender))
    )
    (if (var-get premint-enabled)
      (begin
        (asserts! (>= passes (len orders)) (err ERR-NOT-ENOUGH-PASSES))
        (map-set mint-passes tx-sender (- passes (len orders)))
        (mint-many orders)
      )
      (begin
        (asserts! (var-get sale-enabled) (err ERR-PUBLIC-SALE-DISABLED))
        (mint-many orders)
      )
    )))

(define-private (mint-many (orders (list 25 bool )))  
  (let 
    (
      (last-nft-id (var-get last-id))
      (enabled (asserts! (<= last-nft-id (var-get mint-limit)) (err ERR-NO-MORE-NFTS)))
      (art-addr (var-get artist-address))
      (id-reached (fold mint-many-iter orders last-nft-id))
      (price (* (var-get total-price) (- id-reached last-nft-id)))
      (total-commission (/ (* price COMM) u10000))
      (current-balance (get-balance tx-sender))
      (total-artist (- price total-commission))
      (capped (> (var-get mint-cap) u0))
      (user-mints (get-mints tx-sender))
    )
    (asserts! (or (is-eq false (var-get mint-paused)) (is-eq tx-sender DEPLOYER)) (err ERR-PAUSED))
    (asserts! (or (not capped) (is-eq tx-sender DEPLOYER) (is-eq tx-sender art-addr) (>= (var-get mint-cap) (+ (len orders) user-mints))) (err ERR-NO-MORE-MINTS))
    (map-set mints-per-user tx-sender (+ (len orders) user-mints))
    (if (or (is-eq tx-sender art-addr) (is-eq tx-sender DEPLOYER) (is-eq (var-get total-price) u0000000))
      (begin
        (var-set last-id id-reached)
        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))
      )
      (begin
        (var-set last-id id-reached)
        (map-set token-count tx-sender (+ current-balance (- id-reached last-nft-id)))
        (try! (stx-transfer? total-artist tx-sender (var-get artist-address)))
        (try! (stx-transfer? total-commission tx-sender COMM-ADDR))
      )    
    )
    (ok id-reached)))

(define-private (mint-many-iter (ignore bool) (next-id uint))
  (if (<= next-id (var-get mint-limit))
    (begin
      (unwrap! (nft-mint? xrp-anthem next-id tx-sender) next-id)
      (+ next-id u1)    
    )
    next-id))

(define-public (set-artist-address (address principal))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (ok (var-set artist-address address))))

(define-public (set-price (price uint))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (ok (var-set total-price price))))

(define-public (toggle-pause)
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (ok (var-set mint-paused (not (var-get mint-paused))))))

(define-public (set-mint-limit (limit uint))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (asserts! (< limit (var-get mint-limit)) (err ERR-MINT-LIMIT))
    (ok (var-set mint-limit limit))))

(define-public (burn (token-id uint))
  (begin 
    (asserts! (is-owner token-id tx-sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (is-none (map-get? market token-id)) (err ERR-LISTING))
    (nft-burn? xrp-anthem token-id tx-sender)))

(define-private (is-owner (token-id uint) (user principal))
    (is-eq user (unwrap! (nft-get-owner? xrp-anthem token-id) false)))

(define-public (set-base-uri (new-base-uri (string-ascii 80)))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (var-get metadata-frozen)) (err ERR-METADATA-FROZEN))
    (print { notification: "token-metadata-update", payload: { token-class: "nft", contract-id: (as-contract tx-sender) }})
    (var-set ipfs-root new-base-uri)
    (ok true)))

(define-public (freeze-metadata)
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (var-set metadata-frozen true)
    (ok true)))

;; Non-custodial SIP-009 transfer function
(define-public (transfer (id uint) (sender principal) (recipient principal))
  (begin
    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (is-none (map-get? market id)) (err ERR-LISTING))
    (trnsfr id sender recipient)))

;; read-only functions
(define-read-only (get-owner (token-id uint))
  (ok (nft-get-owner? xrp-anthem token-id)))

(define-read-only (get-last-token-id)
  (ok (- (var-get last-id) u1)))

(define-read-only (get-token-uri (token-id uint))
  (ok (some (concat (concat (var-get ipfs-root) "{id}") ".json"))))

(define-read-only (get-paused)
  (ok (var-get mint-paused)))

(define-read-only (get-price)
  (ok (var-get total-price)))

(define-read-only (get-artist-address)
  (ok (var-get artist-address)))

(define-read-only (get-mints (caller principal))
  (default-to u0 (map-get? mints-per-user caller)))

(define-read-only (get-mint-limit)
  (ok (var-get mint-limit)))

(define-data-var license-uri (string-ascii 80) "")
(define-data-var license-name (string-ascii 40) "")

(define-read-only (get-license-uri)
  (ok (var-get license-uri)))
  
(define-read-only (get-license-name)
  (ok (var-get license-name)))
  
(define-public (set-license-uri (uri (string-ascii 80)))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (ok (var-set license-uri uri))))
    
(define-public (set-license-name (name (string-ascii 40)))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (ok (var-set license-name name))))

;; Non-custodial marketplace extras
(use-trait commission-trait 'SP3D6PV2ACBPEKYJTCMH7HEN02KP87QSP8KTEH335.commission-trait.commission)

(define-map token-count principal uint)
(define-map market uint {price: uint, commission: principal, royalty: uint})

(define-read-only (get-balance (account principal))
  (default-to u0
    (map-get? token-count account)))

(define-private (trnsfr (id uint) (sender principal) (recipient principal))
  (match (nft-transfer? xrp-anthem id sender recipient)
    success
      (let
        ((sender-balance (get-balance sender))
        (recipient-balance (get-balance recipient)))
          (map-set token-count
            sender
            (- sender-balance u1))
          (map-set token-count
            recipient
            (+ recipient-balance u1))
          (ok success))
    error (err error)))

(define-private (is-sender-owner (id uint))
  (let ((owner (unwrap! (nft-get-owner? xrp-anthem id) false)))
    (or (is-eq tx-sender owner) (is-eq contract-caller owner))))

(define-read-only (get-listing-in-ustx (id uint))
  (map-get? market id))

(define-public (list-in-ustx (id uint) (price uint) (comm-trait <commission-trait>))
  (let ((listing  {price: price, commission: (contract-of comm-trait), royalty: (var-get royalty-percent)}))
    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))
    (map-set market id listing)
    (print (merge listing {a: "list-in-ustx", id: id}))
    (ok true)))

(define-public (unlist-in-ustx (id uint))
  (begin
    (asserts! (is-sender-owner id) (err ERR-NOT-AUTHORIZED))
    (map-delete market id)
    (print {a: "unlist-in-ustx", id: id})
    (ok true)))

(define-public (buy-in-ustx (id uint) (comm-trait <commission-trait>))
  (let ((owner (unwrap! (nft-get-owner? xrp-anthem id) (err ERR-NOT-FOUND)))
      (listing (unwrap! (map-get? market id) (err ERR-LISTING)))
      (price (get price listing))
      (royalty (get royalty listing)))
    (asserts! (is-eq (contract-of comm-trait) (get commission listing)) (err ERR-WRONG-COMMISSION))
    (try! (stx-transfer? price tx-sender owner))
    (try! (pay-royalty price royalty))
    (try! (contract-call? comm-trait pay id price))
    (try! (trnsfr id owner tx-sender))
    (map-delete market id)
    (print {a: "buy-in-ustx", id: id})
    (ok true)))
    
(define-data-var royalty-percent uint u500)

(define-read-only (get-royalty-percent)
  (ok (var-get royalty-percent)))

(define-public (set-royalty-percent (royalty uint))
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-INVALID-USER))
    (asserts! (and (>= royalty u0) (<= royalty u1000)) (err ERR-INVALID-PERCENTAGE))
    (ok (var-set royalty-percent royalty))))

(define-private (pay-royalty (price uint) (royalty uint))
  (let (
    (royalty-amount (/ (* price royalty) u10000))
  )
  (if (and (> royalty-amount u0) (not (is-eq tx-sender (var-get artist-address))))
    (try! (stx-transfer? royalty-amount tx-sender (var-get artist-address)))
    (print false)
  )
  (ok true)))

;; Extra functionality required for mintpass
(define-public (toggle-sale-state)
  (let 
    (
      ;; (premint (not (var-get premint-enabled)))
      (sale (not (var-get sale-enabled)))
    )
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (var-set premint-enabled false)
    (var-set sale-enabled sale)
    (print { sale: sale })
    (ok true)))

(define-public (enable-premint)
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (ok (var-set premint-enabled true))))

(define-public (disable-premint)
  (begin
    (asserts! (or (is-eq tx-sender (var-get artist-address)) (is-eq tx-sender DEPLOYER)) (err ERR-NOT-AUTHORIZED))
    (ok (var-set premint-enabled false))))

(define-read-only (get-passes (caller principal))
  (default-to u0 (map-get? mint-passes caller)))

(define-read-only (get-premint-enabled)
  (ok (var-get premint-enabled)))

(define-read-only (get-sale-enabled)
  (ok (var-get sale-enabled)))  

(map-set mint-passes 'SPAE4SFGGSKKH7NC49KQCHJFY9159DG24YHQCJVX u25)
(map-set mint-passes 'SP1HPB7YTZDXMZSZD51C113PQFAXKSNR0QYFFPWVC u1)
(map-set mint-passes 'SPCDCWBEZ9ZEK49BNMDE2MDMJ0E01W02H9SA4TVZ u1)
(map-set mint-passes 'SP2FT8N2ZF49WE2V87HZA7H23C5YYTJ544V0Y4A65 u1)
(map-set mint-passes 'SP2EQP7X0WCJ70ZMQYGPXAD0S9T76JH1CDZMEMQES u1)
(map-set mint-passes 'SP2A0AHSWNYPAS1KRNMEFQMV8WQ2KZRRW8DZC8Z3K u1)
(map-set mint-passes 'SP3B9ZW7MM5KA1192Z06S9Q53M6VRJMDJD8VVHBAT u1)
(map-set mint-passes 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P u1)
(map-set mint-passes 'SP2BN9JN4WEG02QYVX5Y21VMB2JWV3W0KNHPH9R4P u1)
(map-set mint-passes 'SP000000000000000000002Q6VF78 u1)
(map-set mint-passes 'SP2T395ZMA7X6N3JQ5VRKCME0D4DZQVM84M8AAKT1 u1)
(map-set mint-passes 'SPJ6RD5PYMM75KQNGH588RHE153JMWRMCSWP4Q2H u1)
(map-set mint-passes 'SP2JCGKVMZA6QCFX0FF34AS42Z8MD56TBYWX535C8 u1)
(map-set mint-passes 'SP3C1VFR5G2JE9K5GNFENZKMW2V4BEJ94RYBEEJJC u1)
(map-set mint-passes 'SP15V20R21ERBNC5070QWF5SH1VKWPADVWC2RZRGV u1)
(map-set mint-passes 'SP1ARWZD4G0SZPADBFQ5DVSK93B6QKQ6DHK9G452P u1)
(map-set mint-passes 'SP1ARWZD4G0SZPADBFQ5DVSK93B6QKQ6DHK9G452P u1)
(map-set mint-passes 'SP2RNHHQDTHGHPEVX83291K4AQZVGWEJ7WCQQDA9R u20)
(map-set mint-passes 'SPQE3J7XMMK0DN0BWJZHGE6B05VDYQRXRMDV734D u1)
(map-set mint-passes 'SP3QF8RJ3CE59RBAHC96YS6DRSVKYADCF2730P023 u1)
(map-set mint-passes 'SP2XTD345MW8BENE2V6QV6SPBTY9G10GZEGXABPR4 u1)
(map-set mint-passes 'SP238X3JD22HJBMWR8E7CKTF4JCBQ73BG9YS1DBH8 u1)
(map-set mint-passes 'SPJZKJTTSAN2YMXHPF0YZ12HGC8VZ4V82C6VPYHK u1)
(map-set mint-passes 'SP7KZ2AFRRTP53WGKQWY9707Y0W61DK848J1EK2D u1)
(map-set mint-passes 'SP30MSY8NECE4SJJRQ5NVFZA58HF9Y93XX6E15WMG u1)
(map-set mint-passes 'SP18148N2DV6AHCXKXXWZRNHWASEMHTK024S41HAE u1)
(map-set mint-passes 'SP3NAJRMR7F04RK8WG2F48MSQ4ETH3JH1F9MV4F50 u1)
(map-set mint-passes 'SP3K0EE25S57TK269WJDYX9ZBEY763RFBX47TA69W u1)
(map-set mint-passes 'SP119F3JPW5AKFFKKTWEXE1RVD3TYQP8SG4GW80PT u1)
(map-set mint-passes 'SP2RJRBMJQ09GEMZ0255ACY089A30CEB5ED8AWDB6 u1)
(map-set mint-passes 'SPBFPD0285PKTCTADGP9GX2JFE12R8ZXSCWRYW39 u1)
(map-set mint-passes 'SPK37A2Q8N9QB6JC6A7M8696JMNW5ESYGM4PBT1S u1)
(map-set mint-passes 'SP2DV4Y58VAJ93EMYC8PSRS04CFKYZAQHB8E5XC8T u1)
(map-set mint-passes 'SP33QFM4MV7H3821T6REDCB5DN485JKVXNT3ET62F u1)
(map-set mint-passes 'SPJBJ9ES6M9J18R4H2EQWG2VA5F8Q0TTN745M2K6 u1)
(map-set mint-passes 'SP1ZRTHK2HERS7AR0WS6JN73VQX3HHDFMY5EQWJBN u1)
(map-set mint-passes 'SP10DQ9FGRK37Y1RFF1NWBTN5Q5YNV3GWJ4RMDT7K u1)
(map-set mint-passes 'SP3Z991D5QF6EHG2T9TZKDM9M7B010PZTNQD9XK7J u1)
(map-set mint-passes 'SP2KWPNJXQKQ14T3T5GZ61V5H479DPYE77DCCXJJC u1)
(map-set mint-passes 'SPVR9PDHJHGJT59GE10E8QE2433YAZY6Z47EY13P u1)
(map-set mint-passes 'SP23JX6EVN9GK7A4EWWTEJTP6BP75R0SYJX7TV1D9 u1)
(map-set mint-passes 'SP3KVRE3RDYYSJ3JDGXKA0K15CC4JEA2ZGX4TJ5EC u1)
(map-set mint-passes 'SP2VH5JWG25M1T9KYHQ30K096M7BACX5Z2CF82MZF u1)
(map-set mint-passes 'SP1B46TPZD8Y3ETHGZYJAPHD9GHJK81K08WRB127X u1)
(map-set mint-passes 'SPPBGBV4ZEB1FQ3954F1G4JPMKZSYJQ2BJFXEKCN u1)
(map-set mint-passes 'SPABSFFC2ZGXP328F8Q7RDRK96J728NFGD3PV23H u1)
(map-set mint-passes 'SP2WC112DEJR44WVAX5A2WZ21VCTTVMY000AJKKYT u1)
(map-set mint-passes 'SP3658EQDEKG3RYGVE4H1KC3PAS8MRJCXPJN7CYHC u1)
(map-set mint-passes 'SP1FHC2XXJW3CQFNFZX60633E5WPWST4DBW8JFP66 u1)
(map-set mint-passes 'SP3E4G6Z83YTZK1KXFVY6NHR805JEJ2GGYAZVZRTV u1)
(map-set mint-passes 'SP1T79CQEZE51RERQ7ZVAHP2ANPYVTTJCN623H4PG u1)
(map-set mint-passes 'SPQRH49JM9YA39R21KHN49M5S947ETH2QFAW3F02 u1)
(map-set mint-passes 'SP4GZY6SJD3YF65E7QNZC4CTBYR60RJ4WF4079Z4 u1)
(map-set mint-passes 'SP16VAAGEE7XE3DFZZSFDW7T5SCJR1N0WY3CVQ00B u1)
(map-set mint-passes 'SPWC45P8JQP1VG9NDNPJ6ZXPVZ4XXGK06GXR5XN3 u1)
(map-set mint-passes 'SP2NKRMP53H372KY60GARDCR04TCS3VB2BWGS474V u1)
(map-set mint-passes 'SP1BQ6J826J7PEYCGFCT65YKYZ340EZ1B1TD29W1V u1)
(map-set mint-passes 'SP1NJMZW1GWP0ZNK59XE4TQ893CX2R8G7M28QVDBQ u1)
(map-set mint-passes 'SP1XT2RZQFHJJAVMMB72XZY1H6PQVGW7S1Z2AJZNJ u1)
(map-set mint-passes 'SP2JWM4MB1SBY2FT3PG5PM0V12NW8Y4FK1XXWBHSF u1)
(map-set mint-passes 'SP2P8RJ42R8MP0AAJASTT7ST6VZ7GHCWR7PET3B21 u1)
(map-set mint-passes 'SP34BD9Y4F4VVJSVJSET42CWKW6K0A81D1YBC0NVH u1)
(map-set mint-passes 'SP3WZ0B7PAXPRD8Y217DMKGPXESK5EXWWCA7G03TS u1)
(map-set mint-passes 'SP26BHRECCNJBG2G6A139HYJ4C226KTHX762WVN8N u1)
(map-set mint-passes 'SP3WZ0B7PAXPRD8Y217DMKGPXESK5EXWWCA7G03TS u1)
(map-set mint-passes 'SP26BHRECCNJBG2G6A139HYJ4C226KTHX762WVN8N u1)
(map-set mint-passes 'SP2SBT6D37033NTT0X5347YZYZ45MQTPFZR3G45V0 u1)
(map-set mint-passes 'SP3VGRCZDRG8JBGX0H0P340DZC7C3FWCA80S9TT3D u1)
(map-set mint-passes 'SP3K650KFSY5Y2559C56TKZNSBZ2MKVDF0PCAYE78 u1)
(map-set mint-passes 'SP1P637C9NB6GSK9TY8AT8SN3QKH1WSV5ZVCZZSKS u1)
(map-set mint-passes 'SP3AJC728JY0Y43E8RT6K4VDWPT265RDMXJ8M0VH0 u1)
(map-set mint-passes 'SP3V67J2YXAPVGC2YEB7CP4FNGG2NXKB5GD45J2RC u1)
(map-set mint-passes 'SPGSDWYMSA6FTYPMV542D19FTZ73A7WPYXKF1QWE u1)
(map-set mint-passes 'SP25DP4A9QDM42KC40EXTYQPMQCT1P0R5243GWEGS u1)
(map-set mint-passes 'SP15RNN0NHNVPZZNM3TC5TWA7C4ZCBA7JJSPHEE87 u1)
(map-set mint-passes 'SP2GB0DWAXSAM4W5K475RC8GXRQE5YM9KEKSPYXYE u1)
(map-set mint-passes 'SP1ZCYG0D3HCK2F7SY8VH9ZREB0JWCBSAPFNS8V5Z u1)
(map-set mint-passes 'SP29CPZS40X3G7W6AYWB4873M27X22ZH3FJFMKZE1 u1)
(map-set mint-passes 'SP2XNCG1PE6X2QAHWM11QKBQZJKN7EMS2HZKP9QHE u1)
(map-set mint-passes 'SP2EQ889E0BPKDE0K7SNS3DKV11T4685Z599032PM u1)
(map-set mint-passes 'SP2HMNV7HAAWYBYDE3CPQMGZ14V137E78B53KEJV1 u1)
(map-set mint-passes 'SPC1KE74AZ8TT6GB8MXSY6W00MFNC29GDFXHPJX6 u1)
(map-set mint-passes 'SP1B38V9K4MW4AR3C7MP44SHGPMBYHP2A7PJDJ2Z2 u1)
(map-set mint-passes 'SP1Q32FAXFD7BP1B2GNNZ455P71NPG5AJ50BJ1417 u1)
(map-set mint-passes 'SPRD2SQPBW6SCY9Y3NQ9FM9K3BR4G8VGB8CHEBGT u1)
(map-set mint-passes 'SP3NYR9TY7QHDJD2Z1ZD9ERKPX5CZZ74H36ZMKB8A u1)
(map-set mint-passes 'SPSZ01WZ7XDFGYXHD49RZ3SK6FYTYATVVN5GJ2YJ u1)
(map-set mint-passes 'SPBAC6ZCYDG0Z12F784TZ55CMHHW7FJJD93X1GEN u1)
(map-set mint-passes 'SP2HHPWN1RSW34XSSSHC7XBH61Q23N02309AFMW52 u1)
(map-set mint-passes 'SP1AQMCE6AKND8B8R5RV7QNJGC5CPEBPPYNY6QM9T u1)
(map-set mint-passes 'SP3EBNHSGK3WPYGNP3C5KNN54V6H24BJ1H8BVPQ15 u1)
(map-set mint-passes 'SP3WCAEVEA7DGJ6DEHXDW8RBQQQ31TS4NESXMHC2J u1)
(map-set mint-passes 'SP3NYR9TY7QHDJD2Z1ZD9ERKPX5CZZ74H36ZMKB8A u1)
(map-set mint-passes 'SP1FQ3DQDR5N9HJX3XC5DNKFCG4DHH48EFJQV6QH0 u1)
(map-set mint-passes 'SPRD2SQPBW6SCY9Y3NQ9FM9K3BR4G8VGB8CHEBGT u1)
(map-set mint-passes 'SP3EBNHSGK3WPYGNP3C5KNN54V6H24BJ1H8BVPQ15 u1)
(map-set mint-passes 'SP1AQMCE6AKND8B8R5RV7QNJGC5CPEBPPYNY6QM9T u1)
(map-set mint-passes 'SPBAC6ZCYDG0Z12F784TZ55CMHHW7FJJD93X1GEN u1)
(map-set mint-passes 'SPAFJKGDVS11C9P9DY0ZTNFQ9774R568W9XYZDJV u1)
(map-set mint-passes 'SP21ED8W24R13AP4CPEKWK5AZPS5XFFZ4N3PY5YX1 u1)
(map-set mint-passes 'SP2DCFHTZSY5YKSRHC7YRD1AD6HRA9CBZENCM4NGV u1)
(map-set mint-passes 'SP2FPTH274BXVB1E2HNXBAMGABV5TCSZTFNC16FR3 u1)
(map-set mint-passes 'SP3AP6DTCK6G65A4TK78J8J9NSV9DGMNFW0K7Q6YD u1)
(map-set mint-passes 'SP1D67XVMN84D6QWXXQ5NY1DS9DCWN71W3MP00S2X u1)
(map-set mint-passes 'SP2DAYHJS9HYT3ND88JSFJWVG0X1JS7JXA0NG02EZ u1)
(map-set mint-passes 'SP1P4JM3KYHYPV7G8VYT2QDPXW2X8FHRAY62CP0SE u1)
(map-set mint-passes 'SPHKNB2BHPZZJZAQND4ND16P9N5WRK4JCXDEBNEW u1)
(map-set mint-passes 'SPJJZ9G3DWENGJTP4XHD3G9A2GMEJENZPFCVP30W u1)
(map-set mint-passes 'SP3WAAYXPC6WZNEC7SHGR36D32RJPZVXRR1BG0QSY u1)
(map-set mint-passes 'SP2TW1D8YF5CE0NDP5VCR5NMTPHQ4PQR1KBB4NQ5Q u1)
(map-set mint-passes 'SP274JYGEQHMBJWC0S925CT3CNX4WPWD8Z303BCG9 u1)
(map-set mint-passes 'SP34QDBBSYT4DEEMNR3GC9F8V3BF0V17HCCFV0145 u1)
(map-set mint-passes 'SP2PPYXC7B0G5Y7JXJZ3QA2KY4657HAQTTS5KJ5HQ u1)
(map-set mint-passes 'SP12PV7PWGHDY37CF5T38CMGC27T01X25KN4RF3VT u1)
(map-set mint-passes 'SPAGGBPCHKV0J26MBQ7CV7D0QPGZ076T552J0YYY u1)
(map-set mint-passes 'SP22441QWKAMN20Z16A4BVDC607C45GRH4K5C2AWE u1)
(map-set mint-passes 'SP2F65Z44X8B890RSDK8GTZZBN9EXXRP96F3BMEVP u1)
(map-set mint-passes 'SP3JFEKTFHVC3B9RRQ46FNC8MFRZPHVYYTFWYRX6W u1)
(map-set mint-passes 'SP7Z4BV67PTXXH99FAWE2CJDFRFFCW04PHNBK7ZN u1)
(map-set mint-passes 'SP3SFKJFQJAFV5ZTQ9P0TB86AQE639ZDFADKHTQVS u1)
(map-set mint-passes 'SP2VDFZJ7J6MB5SY17BY6H4F6YYH0B6Q4KYCQ48HF u1)
(map-set mint-passes 'SP2W1FEY0Q180MWE1J8AZQ1GNCEVN6M0H9E5MC38G u1)
(map-set mint-passes 'SP1AQDVJF18XEFVXMWTRAW9TQ0N2DCN0178FKW03R u1)
(map-set mint-passes 'SP30RDYWYBCDH2R8NWX71XNGQFX064S6QMY5MBM1K u1)
(map-set mint-passes 'SP283BQ9PC3WW1TME4FK65SBDKPTRDM89QSWCHN3J u1)
(map-set mint-passes 'SP3WYQMPRNTX8VTKKD4TVS2W7PEYYP3V3Y24KNQ4F u1)
(map-set mint-passes 'SP2Q1AZMQDWH3M8DHJHVE1FC261QJ6Z9RC9ET9HGH u1)
(map-set mint-passes 'SP14W78Q821B3HQ3ED30624Z1F13X4JMFZY3N5SK4 u1)
(map-set mint-passes 'SP5TW8GY764TZ2HKVAQQ4Z1FB6K9GJ9CS82974XM u1)
(map-set mint-passes 'SP3ZCTZ0JDHXXCT63FZ8DC01PWJYCAB5EFP2ZH1X0 u1)
(map-set mint-passes 'SPWR61YRMNPGX6JASY3ZR6SSE79ACV143YW1PCAN u1)
(map-set mint-passes 'SP1MP4A2TZBX935NS93V5QP8ESG8534XARQFQPCMG u1)
(map-set mint-passes 'SP2KKNVN3TFK0DYDAW6E3HZVPTN5FETZZZ436MNG9 u1)
(map-set mint-passes 'SP74BB1WD3XG6V7NMK4TW5SFNHTJ5AD4N84CAZMF u1)
(map-set mint-passes 'SP37BWJKFCBJHW7C3H522M03DCRJQ2NC492T4AMY9 u1)
(map-set mint-passes 'SP1VXXTC9R98DAXCT14CZMH2J78DXKT6J6AP6HXV6 u1)
(map-set mint-passes 'SPW45A1QA35EBWDB47V6VNK7ZMXZ01PFCJQA2JPX u1)
(map-set mint-passes 'SP31JEKBEZGH2TJ9EG2TJDDYH78BB16PZZBPMKJW3 u1)
(map-set mint-passes 'SP3J98KY1Q89VA6XY69CP6FJJW9S1ZRWRP7RKKF4R u1)
(map-set mint-passes 'SP3273YEPG4QZWX0ENQ98FBT1N2Y06XW820STP7NN u1)
(map-set mint-passes 'SP2YDZB938V1QNSRN2XCCP8YTWEXVC89HK9DFYDCP u1)
(map-set mint-passes 'SP1QYG7Q1NT7Y9X8GV4DQQYSM2X9DDVH304BVYF0Y u1)
(map-set mint-passes 'SP2664YJ6Z7AWGKSGYG3MSDCCR3ZZREX3JH14TCCE u1)
(map-set mint-passes 'SP2ZM0FFZGQ64SX8G287QJEPH2KYF0EZRDJ15PSYC u1)
(map-set mint-passes 'SP372G1CB1DWQ8T873RC085K3QGJQ0SSRDWBM0A88 u1)
(map-set mint-passes 'SP6BHQ2HCJM6J4HX7S968MGD2VB86P7CVR6S0ENP u1)
(map-set mint-passes 'SP3J3WXWS5QTABAE0S14XX8BXPW76RJMADGAX3FR6 u1)
(map-set mint-passes 'SP2Y9GB57MDT3JF8RAR7BC7D332RAZPGCEKX54NKF u1)
(map-set mint-passes 'SP29902VVK134BEFGP0F3QT7W2H5CFY2BVWAKSN7E u1)
(map-set mint-passes 'SP2NTZ5ABMMMX1KYEHK3KYK5ZV6FKWV01CXRNYT44 u1)
(map-set mint-passes 'SP17PZJ9A8W29FGM8BRY96M0XDXE6PRZX9DJHB926 u1)
(map-set mint-passes 'SPVW6AV9A3H7G7P7S84GFP555E86B1SY6BE9DQPV u1)
(map-set mint-passes 'SP2MYQF316JWNY0M6MBGRFPZS17GJKRA26ZPB35HM u1)
(map-set mint-passes 'SP1YGHETQ1ADA66DH9QD0XMK012W3FQHZ6CP2FT1W u1)
(map-set mint-passes 'SP2RJA607NFS766M67VK2TRRTSNBFWMM1N8AH1RSC u1)
(map-set mint-passes 'SP1B2706F31PR4MR6R3453326ZR7366CBAGVVCC80 u1)
(map-set mint-passes 'SP1GR38P4KNCQRC1BD5HC97DP36W2MBZFZ4WC0NET u1)
(map-set mint-passes 'SP3WJ60NYCKAG0D9YPSPD5T74M9NM5VZW4WZM7QG7 u1)
(map-set mint-passes 'SPWQJSR0FPTZQCQ7GF7VJMA76QV89PETA27ZCQX7 u1)
(map-set mint-passes 'SPHDBN8HGYBWCC93TA95H0T4978P1A5N6M5GZ0ZY u1)
(map-set mint-passes 'SP2BHPNVSEK74QWZERJV2671PN4CRCY4EQ5ZG5CMN u1)
(map-set mint-passes 'SP2H0RVJ0TCRZ3FAFAE4RD841WRCBEPGQRYZ12FF6 u1)
(map-set mint-passes 'SP15JMFZY4S59PTKHB399KE78ST5CHEYE2S0NCBNM u1)
(map-set mint-passes 'SP2ABA4HC0CS4JGRJB62CP055HHGZ4P3DSMR69QC8 u1)
(map-set mint-passes 'SPFPA79NV316NDZVEXEZV2ZY51JMMTN1W6R3SV1P u1)
(map-set mint-passes 'SP2N7VSJ2DT9NY438G3VDWYFP3WWBKYN46GQPHH6T u1)
(map-set mint-passes 'SPXY0VFX761352VTJPAMNYTJYYA82A5DRH0VR57P u1)
(map-set mint-passes 'SP2QPKZPPEBZ7ZB7E558TTW15X75S9VDHC09M9SJF u1)
(map-set mint-passes 'SP260ZF58NPJZCJGB2K51327RW299BHES24W4ARKE u1)
(map-set mint-passes 'SP3NDESQG789SKPM4PB42Z04R07TK91Q2MXHR3YR9 u1)
(map-set mint-passes 'SP3Z7511VWR5WG9J3MAKER3NRZYKWT83K2XTP36EV u1)
(map-set mint-passes 'SPWSGE1CDEHMM56SGMS9ZY3P91Z0G7YWD6R04KCA u1)
(map-set mint-passes 'SP19ABGPHMYDK6PA9D9NE0FCCG8NF0TYEM74MVQQ8 u1)
(map-set mint-passes 'SP2M13PGDK52VJHQXRXFQH10E5MEW767B27PQC1K0 u1)
(map-set mint-passes 'SP2N756NJDP0A3WYTF2ANXWJR0CEM0Y42E5C96C7J u1)
(map-set mint-passes 'SP1VEHWR3SVWZWN24YQTHS3CVSMWEHK39CBM6Z3F5 u1)
(map-set mint-passes 'SP1DMPD0JNAVDRCTY17S2MNHX8F6502NB0Z25RVR u1)
(map-set mint-passes 'SP2BH9D4AKKANA8G8Q5ED1XBFGBRWNY0RS5PP20T5 u1)
(map-set mint-passes 'SP3P5P8T9BC00GDS9SXT9QFWBJ8BXJJWCZWMYVTE u1)
(map-set mint-passes 'SP1W8J78ZWQ12TQ4910C2FAETWMS5MZATR75FXWCV u1)
(map-set mint-passes 'SPENNNHX6HCPCJ5D5RJXQRMAVH9MPW1ASR4JJ17M u1)
(map-set mint-passes 'SP1QAS390Q4A4AHFRF5MRJ6BRD73H8AWS93QNM84Y u1)
(map-set mint-passes 'SP3EMZ5XM95XZRVFWB5M8JH3VRMMPJ8661WTT1M3T u1)
(map-set mint-passes 'SP1BH4ZGWANHZS5QHN8DHNEHP0QTGJBRW5WMPD4Q3 u1)
(map-set mint-passes 'SPZSPSSF4GVFBQDTSWWY2F0WPHY3JE0PQ5F2MKA u1)
(map-set mint-passes 'SP35MER4PHM6XGB99YDRQAK0M0JQ8F9CVF04VZ1VX u1)
(map-set mint-passes 'SP2387TVHZ5X6TSCD6HNDA7N8ZC4M1XNYHFBHNWS5 u1)
(map-set mint-passes 'SPWD1B6SKM4T0DC4P3TQ20JWJ45VYGFHECMWKA4B u1)
(map-set mint-passes 'SPN6EFJZRDM7P4FP3CWY3RC8RZ2RD69MQ9DXJBZT u1)
(map-set mint-passes 'SP2FSWDJH88ET9RP3PWZE5SFWARQAW0R8DZR5DVE1 u1)
(map-set mint-passes 'SP2QVKZ2GWP97TW4RNCT8TN65JRJPVAKERHYSS13E u1)
(map-set mint-passes 'SPBA7M8945VXHCFERA2M8BNZDTJQ2MZ3E4K9E11B u1)
(map-set mint-passes 'SP2PZYA27E8MRBQHQXE0JQH5CHM9JJNM00YEMC4QJ u1)
(map-set mint-passes 'SP3R4NKXMGW6YXA44X2ESZPKJNV25X4ZN7DPW0RXR u1)
(map-set mint-passes 'SP1ZWG5WEND2QSYQ04DAP17A5RMDBG76NXQQ115SK u1)
(map-set mint-passes 'SPFESJNCJPJEAMTA0Z9T02EN7FXCGR1S02C1EKW2 u1)
(map-set mint-passes 'SP2H9Z97J0B3159H45ZFX6TVKS9RT3KVKDPGAHJC5 u1)
(map-set mint-passes 'SP68A2GDYFED1P932H1Z3J2NKP24D8WW486C6QWT u1)
(map-set mint-passes 'SP380WYDKAB86C0WPK6FZFRCB3DDZTWKETDWQ9T54 u1)
(map-set mint-passes 'SP25SF2MPZZS8Q20QA3VTYJXTHAHCRNM5MSZYDNB0 u1)
(map-set mint-passes 'SPPTGPWRZ1BWZ9J94DKBRQQHK6ABD5H5JW3X1CYN u1)
(map-set mint-passes 'SP3HDSZV07KEZVG1349ZABC2ETE7D0H19SD30CATQ u1)
(map-set mint-passes 'SP2CMR4M40X8EVQWE2CF19EBXS7QCG7YBWHY3HXQG u1)
