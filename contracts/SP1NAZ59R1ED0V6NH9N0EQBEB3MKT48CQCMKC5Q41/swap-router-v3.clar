(use-trait extension-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (impl-trait 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.extension-trait.extension-trait) (define-constant E8 u100000000) (define-constant E2 u100) (define-constant TL (list u100 u200 u300 u500 u700 u1000)) (define-read-only (s2e (n uint)) (* n E2)) (define-read-only (c3 (bp (buff 2048)) (x2 uint) (y2 uint) (f2 uint)) (let ((p1 (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token)))) (x1 (s2e (get balance-x p1))) (y1 (s2e (get balance-y p1))) (f1 u300000)) (if (> (mod (buff-to-uint-be (unwrap-panic (element-at? bp u4))) u13) u0) {d:u0,i:true,o:u0,ox:u0,p:u0} (sw2 x1 y1 f1 x2 y2 f2)))) (define-public (i3 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token in u0))) (t2 (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o3 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none))) (t2 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u0))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-private (c8 (bp (buff 2048)) (x3 uint) (y3 uint) (f3 uint)) (if (> (mod (buff-to-uint-be (unwrap-panic (element-at? bp u4))) u13) u0) {d:u0,i:true,o:u0,ox:u0,p:u0} (let ((p1 (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw get-lp-data))) (p2 (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac get-lp-data))) (x1 (s2e (get balance-x p1))) (y1 (s2e (get balance-y p1))) (f1 u300000) (x2 (s2e (get balance-x p2))) (y2 (s2e (get balance-y p2))) (f2 f1)) (sw3 x1 y1 f1 x2 y2 f2 x3 y3 f3)))) (define-public (i8 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw in u1))) (t2 (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1))) (t3 (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi get-balance tx-sender)) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o8 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t3 (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none))) (t2 (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-v5kbe3oqvac (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1))) (t1 (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.wstx-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-stx-stsw (unwrap-panic (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stsw-token-v4a get-balance tx-sender)) u1))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-read-only (c9 (bp (buff 2048)) (x2 uint) (y2 uint) (f2 uint)) (let ((p1 (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-core get-pool u27))) (x1 (s2e (get reserve0 p1))) (y1 (s2e (get reserve1 p1))) (f1 (- E8 (/ (* E8 (get num (get swap-fee p1))) (get den (get swap-fee p1)))))) (if (> (mod (buff-to-uint-be (unwrap-panic (element-at? bp u4))) u13) u0) {d:u0,i:true,o:u0,ox:u0,p:u0} (sw2 x1 y1 f1 x2 y2 f2)))) (define-public (i9 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 ))) (t2 (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender))) none))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o9 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8 (s2e in) none))) (t2 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u27 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3NE50GEXFG9SZGTT51P40X2CKYSZ5CC4ZTZ7A2G.welshcorgicoin-token get-balance tx-sender)) u1 ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-private (c13 (bp (buff 2048))) (if (is-eq (mod (buff-to-uint-be (unwrap-panic (element-at? bp u4))) u13) u0) {d:u0,i:true,o:u0,ox:u0,p:u0} (let ((db (buff-to-uint-be (unwrap-panic (element-at? bp u13)))) (p1 (unwrap-panic (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-core get-pool u6))) (p2 (unwrap-panic (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token)))) (x1 (s2e (get reserve0 p1))) (y1 (s2e (get reserve1 p1))) (f1 (- E8 (/ (* E8 (get num (get swap-fee p1))) (get den (get swap-fee p1))))) (x2 (s2e (get balance-y p2))) (y2 (s2e (get balance-x p2))) (f2 u300000)) (sw2 x1 y1 f1 x2 y2 f2)))) (define-public (i13 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t1 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to in u1 ))) (t2 (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-4 swap-y-for-x 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-4 (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 ))) (t3 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u0))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-public (o13 (in uint)) (begin (let ((bb (stx-get-balance tx-sender)) (t3 (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.wrapped-stx-token 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token in u0))) (t2 (unwrap-panic (contract-call? 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.stableswap-usda-aeusdc-v-1-2 swap-x-for-y 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SPQC38PW542EQJ5M11CR25P7BS1CA6QT4TBXGB3M.usda-aeusdc-lp-token-v-1-2 (unwrap-panic (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.usda-token get-balance tx-sender)) u1 ))) (t1 (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens u6 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.wstx 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to (unwrap-panic (contract-call? 'SP3Y2ZSH8P7D50B0VBTSX11S7XSG24M1VB9YFQA4K.token-aeusdc get-balance tx-sender)) u1 ))) (ba (stx-get-balance tx-sender))) (asserts! (>= ba bb) (err (- bb ba))) (ok (- ba bb))))) (define-map fm uint bool) (define-read-only (ms (c (tuple (c uint) (d uint) (i bool) (o uint) (ox uint) (p uint))) (s (tuple (c uint) (d uint) (i bool) (o uint) (ox uint) (p uint)))) (if (and (> (get ox c) (get ox s)) (> (get ox c) u100000) (> (get d c) u0) (not (is-some (map-get? fm (+ (* burn-block-height u100) (get c c)))))) c s)) (define-public (cm (bp (buff 2048))) (let ((asw (unwrap-panic (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 get-pool-details 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wcorgi E8))) (aswx (get balance-x asw)) (aswy (get balance-y asw)) (aswf (get fee-rate-y asw)) (p3 (merge (c3 bp aswy aswx aswf) {c:u3})) (p8 (merge (c8 bp aswy aswx aswf) {c:u8})) (p9 (merge (c9 bp aswy aswx aswf) {c:u9})) (p13 (merge (c13 bp) {c:u13})) (rc (fold ms (list p3 p8 p9 p13) {c:u0,d:u0,i:true,o:u0,ox:u0,p:u0})) (cn (get c rc)) (c (stx-get-balance tx-sender)) (dx (/ (get d rc) E2)) (d (if (< dx c) dx c)) (rs (if (is-eq cn u0) (ok u0) (if (is-eq cn u3) (if (get i rc) (i3 d) (o3 d)) (if (is-eq cn u8) (if (get i rc) (i8 d) (o8 d)) (if (is-eq cn u9) (if (get i rc) (i9 d) (o9 d)) (if (is-eq cn u13) (if (get i rc) (i13 d) (o13 d)) (err u0)))))))) (if (is-err rs) (map-set fm (+ (* burn-block-height u100) (get c rc)) true) true) (ok {rc:rc,rs:rs}))) (define-public (callback (tg principal) (bp (buff 2048))) (let ((ex (print (unwrap-panic (cm bp))))) (ok true))) (define-public (execute (bp (buff 2048)) (t <extension-trait>)) (begin (asserts! (is-eq (as-contract tx-sender) (contract-of t)) (err u0)) (as-contract (try! (contract-call? 'SPB75ZW15C90ZNDPQF4GSVNGBEJJA6WACZKNFVFK.vault-v1 flash-loan-stx t u1000000000 tx-sender bp))) (as-contract (let ((ba (stx-get-balance tx-sender))) (and (> ba u0) (try! (stx-transfer? ba tx-sender (unwrap-panic (principal-construct? 0x16 (unwrap-panic (as-max-len? (unwrap-panic (slice? bp u0 u20)) u20))))))))) (ok true))) (define-private (md (a uint) (b uint)) (/ (* a b) E8)) (define-private (es2 (x1 uint) (y1 uint) (f1 uint) (x2 uint) (y2 uint) (f2 uint) (d uint)) (let ((d1 (md d (- E8 f1))) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (md t1 (- E8 f2))) (t2 (/ (* d2 y2) (+ d2 x2)))) (if (> t2 d) (- t2 d) u0))) (define-private (fsw2 (d uint) (t (list 8 uint))) (let ((x1 (unwrap-panic (element-at? t u0))) (y1 (unwrap-panic (element-at? t u1))) (f1 (unwrap-panic (element-at? t u2))) (x2 (unwrap-panic (element-at? t u3))) (y2 (unwrap-panic (element-at? t u4))) (f2 (unwrap-panic (element-at? t u5))) (pox (unwrap-panic (element-at? t u6))) (nox (es2 x1 y1 f1 x2 y2 f2 (* d E8)))) (if (> nox pox) (list x1 y1 f1 x2 y2 f2 nox (* d E8)) t))) (define-private (sw2 (x1 uint) (y1 uint) (f1 uint) (x2 uint) (y2 uint) (f2 uint)) (let ((z (/ (* (/ (* E8 y1) x1) y2) x2)) (i (> z E8)) (sw (if i (fold fsw2 TL (list x1 y1 f1 x2 y2 f2 u0 u0)) (fold fsw2 TL (list y2 x2 f2 y1 x1 f1 u0 u0))))) {d:(unwrap-panic (element-at? sw u7)),i:i,o:z,p:u0,ox:(unwrap-panic (element-at? sw u6))} )) (define-private (es3 (x1 uint) (y1 uint) (f1 uint) (x2 uint) (y2 uint) (f2 uint) (x3 uint) (y3 uint) (f3 uint) (d uint)) (let ((d1 (md d (- E8 f1))) (t1 (/ (* d1 y1) (+ d1 x1))) (d2 (md t1 (- E8 f2))) (t2 (/ (* d2 y2) (+ d2 x2))) (d3 (md t2 (- E8 f3))) (t3 (/ (* d3 y3) (+ d3 x3)))) (if (> t3 d) (- t3 d) u0))) (define-private (fsw3 (d uint) (t (list 11 uint))) (let ((x1 (unwrap-panic (element-at? t u0))) (y1 (unwrap-panic (element-at? t u1))) (f1 (unwrap-panic (element-at? t u2))) (x2 (unwrap-panic (element-at? t u3))) (y2 (unwrap-panic (element-at? t u4))) (f2 (unwrap-panic (element-at? t u5))) (x3 (unwrap-panic (element-at? t u6))) (y3 (unwrap-panic (element-at? t u7))) (f3 (unwrap-panic (element-at? t u8))) (pox (unwrap-panic (element-at? t u9))) (nox (es3 x1 y1 f1 x2 y2 f2 x3 y3 f3 (* d E8)))) (if (> nox pox) (list x1 y1 f1 x2 y2 f2 x3 y3 f3 nox (* d E8)) t))) (define-private (sw3 (x1 uint) (y1 uint) (f1 uint) (x2 uint) (y2 uint) (f2 uint) (x3 uint) (y3 uint) (f3 uint)) (let ((z (/ (* (/ (* (/ (* E8 y1) x1) y2) x2) y3) x3)) (i (> z E8)) (sw (if i (fold fsw3 TL (list x1 y1 f1 x2 y2 f2 x3 y3 f3 u0 u0)) (fold fsw3 TL (list y3 x3 f3 y2 x2 f2 y1 x1 f1 u0 u0))))) {d:(unwrap-panic (element-at? sw u10)),i:i,o:z,p:u0,ox:(unwrap-panic (element-at? sw u9))} ))