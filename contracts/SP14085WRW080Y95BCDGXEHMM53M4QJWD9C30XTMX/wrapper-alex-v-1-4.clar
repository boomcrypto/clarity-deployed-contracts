(define-trait f ((get-balance (principal) (response uint uint)))) (define-private (b (t <f>) (p principal)) (unwrap-panic (contract-call? t get-balance p))) (define-private (sb (p principal)) (stx-get-balance p)) (define-constant t (as-contract tx-sender)) (define-private (di (i uint)) (begin (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-y-for-x 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.token-wsbtc u100000000 (sb tx-sender) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.token-wsbtc u100000000 (b 'SP1E0XBN9T4B10E9QMR7XMFJPMA19D77WY3KP2QKC.token-wsbtc tx-sender) none)) (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-x-for-y 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-wstx-v2 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex u100000000 (b 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.token-alex tx-sender) none)) (ok u1))) (define-private (d (i uint) (mo uint)) (let ((bb (stx-get-balance tx-sender)) (z1 (try! (stx-transfer? i tx-sender t))) (dir (as-contract (di i))) (z2 (try! (stx-transfer? (stx-get-balance t) t tx-sender))) (ba (stx-get-balance tx-sender)) (r (- ba bb))) (asserts! (>= r mo) (err u5473)) (ok r))) (define-public (dd (i uint) (mo uint) (ti uint)) (let ((r (d i mo))) (and (> (stx-get-balance tx-sender) ti) (try! (stx-transfer? (- (stx-get-balance tx-sender) ti) tx-sender 'SP2JFQYP5V4P7F13SMT9GGMEC1F8X91YC4SF86G1J))) (ok r)))