(use-trait nma 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait) (use-trait nmb 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait nmc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (use-trait wnm 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait) (use-trait sfttc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.share-fee-to-trait) (use-trait mumuuun 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait uft2 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait sspl 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (define-constant ERR-EXCEEDS-MAX-SLIPPAGE (err 7676)) (define-constant ashwa tx-sender) (define-constant il1i (as-contract tx-sender)) (define-public (di (jj <nmb>) (jlj <nmb>) (ii uint)) (ok (if (is-err (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details (contract-of jj) (contract-of jlj))) (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x jlj jj ii u1)) u0)) (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y jj jlj ii u1)) u1)) ))) (define-public (vi (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id uint) (diko <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <wnm>) (ii uint) (alex uint)) (ok (match ststx pool (get amt-out (try! (contract-call? pool swap jj jlj (unwrap-panic mnwmn) ii alex))) (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id diko j jj jlj share-fee-to ii alex))) )) ) (define-public (sa (jj <nmb>) (jlj <nmb>) (nin <sspl>)  (source-trait <nma>) (welsh <nma>) (velar uint) (li uint) (min-amt uint) (nn uint)) (let ((sender tx-sender) ) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01  swap-helper source-trait  welsh  velar (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj jlj nin li u1)) u1) ) nn) (some min-amt) )) u100) il1i sender))) ) (define-public (as (source-trait <nma>) (welsh <nma>) (velar uint) (jj <nmb>) (jlj <nmb>) (nin <sspl>) (li uint) (min-amt uint) (nn uint)) (let ((sender tx-sender) ) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj jlj nin (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1)) ) nn) min-amt )) u0)) il1i sender)) )) (define-public (sd (t-s <nmb>) (tt-s <nmb>) (nin <sspl>)  (diko <nmb>) (j <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender) ) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer?  (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko j (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y t-s tt-s nin li u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (saa  (jj <nmb>)  (jlj <nmb>)  (nin <sspl>)  (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (ljjijjji <nma>)  (wmmuuum <nma>)  (usdc uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj jlj nin li u1)) u1)) nnnnwm) (some u1))) (some min-amt))) u100) il1i sender)) )) (define-public (aas  (source-trait <nma>)  (welsh <nma>)  (velar uint) (leo <nma>)  (wmmuuun <nma>)  (llI1ll uint) (jj-3 <nmb>)  (jlj-3 <nmb>)  (nin-3 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer?  (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (ssa (usda <nmb>) (btc <nmb>) (nin <sspl>) (mumnnu <nmb>) (mw <nmb>)  (tlh <sspl>) (source-trait <nma>) (welsh <nma>) (velar uint) (ii uint)  (min-amt uint) (nn uint)) (let ((sender tx-sender) ) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y mumnnu mw tlh (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y  usda btc nin ii u1)) u1)) u1)) u1)) nn) (some min-amt))) u100) il1i sender )))) (define-public (ss2a (usda <nmb>) (btc <nmb>) (nin <sspl>) (mumnnu <nmb>) (mw <nmb>)  (tlh <sspl>) (source-trait <nma>) (welsh <nma>) (velar uint) (ii uint)  (min-amt uint) (nn uint)) (let ((sender tx-sender) ) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x mumnnu mw tlh (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y  usda btc nin ii u1)) u1)) u1)) u1)) nn) (some min-amt))) u100) il1i sender )))) (define-public (sv (jj <nmb>) (jlj <nmb>) (nin <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj jlj nin li u1)) u1)) alex)) il1i sender) ))) (define-public (sav (jj <nmb>) (jlj <nmb>) (nin <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (usdt (optional <mumuuun>))  (meme (optional <uft2>)) (id-3 uint)  (diko-3 <nmb>)  (j-3 <nmb>)  (jj-3 <nmb>)  (jlj-3 <nmb>)  (share-fee-to-3 <wnm>) (li uint) (alex uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj jlj nin li u1)) u1)) nnnnwm) (some u1))) wnnwm) alex) ) il1i sender )))) (define-public (svs (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (sds (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (sda (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (sdd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (diko-3 <nmb>) (j-3 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-3 j-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (svv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) alex)) il1i sender)) ) ) (define-public (svd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (diko-3 <nmb>) (j-3 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-3 j-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (svaa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) nnnnwm) (some u1))) (some min-amt))) u100) il1i sender)) ) ) (define-public (saaa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) (some u1))) (some min-amt))) u100) il1i sender)) ) ) (define-public (svvv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) alex)) il1i sender)) ) ) (define-public (svda (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (diko-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (di diko-3 j-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)))) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (sdvv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) u1)) alex)) il1i sender)) ) ) (define-public (savv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) alex)) il1i sender)) ) ) (define-public (sadd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-3 j-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm))) min-amt)) u0)) il1i sender)) ) ) (define-public (sdaa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) nnnnwm) (some u1))) (some min-amt))) u100) il1i sender)) ) ) (define-public (sdva (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) u1)) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (ssav (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi  il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) nnnnwm) (some u1))) wnnwm) alex)) il1i sender)) )) (define-public (ss2av (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi  il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) nnnnwm) (some u1))) wnnwm) alex)) il1i sender)) )) (define-public (ssvv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) alex)) il1i sender)) )) (define-public (ss2vv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) alex)) il1i sender)) )) (define-public (ssvd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (ss2vd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (ssdv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)))) alex)) il1i sender)) )) (define-public (ss2dv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)))) alex)) il1i sender)) )) (define-public (ssad (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) nnnnwm) (some u1))) wnnwm) min-amt)) u0)) il1i sender)) )) (define-public (ss2ad (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) nnnnwm) (some u1))) wnnwm) min-amt)) u0)) il1i sender)) )) (define-public (ssda (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)))) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (ss2da (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)))) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (ssdd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)))) min-amt)) u0)) il1i sender)) )) (define-public (ss2dd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)))) min-amt)) u0)) il1i sender)) )) (define-public (ssaa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) nnnnwm) (some u1))) (some min-amt))) u100) il1i sender)) )) (define-public (ss2aa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) nnnnwm) (some u1))) (some min-amt))) u100) il1i sender)) )) (define-public (svav (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) nnnnwm) (some u1))) wnnwm) alex)) il1i sender)) ) ) (define-public (svva (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (svdv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)))) alex)) il1i sender)) ) ) (define-public (sssa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (ss2sa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (sss2a (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) u1)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (ss2s2a (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) u1)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (sssv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) u0)) alex)) il1i sender)) )) (define-public (ss2sv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) u0)) alex)) il1i sender)) )) (define-public (sss2v (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) u1)) alex)) il1i sender)) )) (define-public (ss2s2v (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) u1)) alex)) il1i sender)) )) (define-public (sssd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (ss2sd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (sss2d (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (ss2s2d (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (svsa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (sv2sa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (svsv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u0)) alex)) il1i sender)) )) (define-public (svs2v (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) alex)) il1i sender)) ) ) (define-public (svsd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (svs2d (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (sasa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) u0)) nnwm) (some min-amt))) u100) il1i sender)) )) (define-public (sas2a (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) u0)) nnwm) (some min-amt))) u100) il1i sender)) )) (define-public (sasv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) u0)) alex)) il1i sender)) )) (define-public (sas2v (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) u1)) alex)) il1i sender)) )) (define-public (sasd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (sas2d (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (sdsa (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (sds2a (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (sdsv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) u1)) u0)) alex)) il1i sender)) ) ) (define-public (sdsd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (sds2v (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) u1)) u1)) alex)) il1i sender)) )) (define-public (sdss (diko <nmb>) (j <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y diko j li u1)) u1)) u1)) u0)))) min-amt)) u0)) il1i sender)) ) ) (define-public (sds2s (diko <nmb>) (j <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y diko j li u1)) u1)) u1)) u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (sdds (diko <nmb>) (j <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (jj-5 <nmb>) (jlj-5 <nmb>) (nin-5 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-5 jlj-5 nin-5 (try! (di diko-4 j-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y diko j li u1)) u1)) u1)) u0)))))) min-amt)) u0)) il1i sender)) ) ) (define-public (sdvs (diko <nmb>) (j <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (jj-5 <nmb>) (jlj-5 <nmb>) (nin-5 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-5 jlj-5 nin-5 (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y diko j li u1)) u1)) u1)) u0)))) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (sad (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (diko-3 <nmb>) (j-3 <nmb>) (li uint) (min-amt uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-3 j-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jlj-1 jj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (sas (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jlj-1 jj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (sdv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jlj-1 jj-1 nin-1 li u1)) u1)))) alex)) il1i sender)) ) ) (define-public (ssd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jlj-1 jj-1 nin-1 li u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (ss2d (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jlj-1 jj-1 nin-1 li u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (sva (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jlj-1 jj-1 nin-1 li u1)) u1)) u1)) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (sss (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (ssv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) alex)) il1i sender)) ) ) (define-public (pooq) (stx-transfer? (stx-get-balance (as-contract tx-sender)) (as-contract tx-sender) ashwa)) (define-public (saad (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm-1 uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm-1) (some u1))) (some u1))) wnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (sass (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (sada (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (diko-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm-1 uint) (wnnwm uint)  (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y diko-3 j-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm-1) (some u1))) wnnwm) u1)) u1)) nnwm) (some min-amt))) il1i sender)) ) ) (define-public (savs (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm-1 uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm-1) (some u1))) wnnwm) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (sdas (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm-1 uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) nnnnwm-1) (some u1))) wnnwm) min-amt)) u0)) il1i sender)) )) (define-public (saas (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) (some u1))) wnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (saav (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) (some u1))) wnnwm) alex)) il1i sender)) ) ) (define-public (sads (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm))) min-amt)) u0)) il1i sender)) ) ) (define-public (sadv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm))) alex)) il1i sender)) ) ) (define-public (sava (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) nnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (savd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (sdad (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm))) min-amt)) u0)) il1i sender)) ) ) (define-public (sdav (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm))) alex)) il1i sender)) ) ) (define-public (sdda (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (diko-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (di diko-3 j-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))))) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (sddd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-3 j-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))))) min-amt)) u0)) il1i sender) ) )) (define-public (sddv (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))))) alex)) il1i sender)) ) ) (define-public (sdvd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)))) u1)) min-amt)) u0)) il1i sender)) )) (define-public (ssas (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) nnnnwm) (some u1))) wnnwm) min-amt)) u0)) il1i sender)) )) (define-public (ssds (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)))) min-amt)) u0)) il1i sender)) )) (define-public (ssss (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (ssva (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (ssvs (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (svad (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (svas (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (svdd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-3 j-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (svds (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (svss (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (svvd (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (svvs (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (svs2s (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (ss (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (ss2s (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (ss2v (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (li uint) (alex uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) alex)) il1i sender)) )) (define-public (sds2d (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-2 j-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)))) min-amt)) u0)) il1i sender)) )) (define-public (sas2s (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) nnnnwm) (some u1))) wnnwm) u1)) u0)) min-amt)) u0)) il1i sender) ))) (define-public (ss2as (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) nnnnwm) (some u1))) wnnwm) min-amt)) u0)) il1i sender) ))) (define-public (ss2ds (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)))) min-amt)) u0)) il1i sender)) )) (define-public (ss2s2s (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (ss2vs (jj-1 <nmb>) (jlj-1 <nmb>) (nin-1 <sspl>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-1 jlj-1 nin-1 li u1)) u1)) u1)) u0)) u1)) min-amt)) u0)) il1i sender)) ))