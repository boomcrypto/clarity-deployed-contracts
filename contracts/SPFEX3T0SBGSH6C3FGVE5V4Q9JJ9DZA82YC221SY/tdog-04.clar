(use-trait nma 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait) (use-trait nmb 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait nmc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (use-trait wnm 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait) (use-trait sfttc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.share-fee-to-trait) (use-trait mumuuun 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait uft2 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait sspl 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (define-constant il1i (as-contract tx-sender)) (define-public (di (jj <nmb>) (jlj <nmb>) (ii uint)) (ok (if (is-err (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details (contract-of jj) (contract-of jlj))) (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x jlj jj ii u1)) u0)) (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y jj jlj ii u1)) u1)) ))) (define-public (vi (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id uint) (diko <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <wnm>) (ii uint) (alex uint)) (ok (match ststx pool (get amt-out (try! (contract-call? pool swap jj jlj (unwrap-panic mnwmn) ii alex))) (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id diko j jj jlj share-fee-to ii alex))) )) ) (define-public (as (source-trait <nma>) (welsh <nma>) (velar uint) (jj <nmb>) (jlj <nmb>) (nin <sspl>) (li uint) (min-amt uint) (nn uint)) (let ((sender tx-sender) ) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj jlj nin (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1)) ) nn) min-amt )) u0)) il1i sender)) )) (define-public (aas  (source-trait <nma>)  (welsh <nma>)  (velar uint) (leo <nma>)  (wmmuuun <nma>)  (llI1ll uint) (jj-3 <nmb>)  (jlj-3 <nmb>)  (nin-3 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer?  (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (ads (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) min-amt)) u0)) il1i sender)) ) ) (define-public (ass (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (as2s (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (asv (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) alex)) il1i sender)) )) (define-public (as2v (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) alex)) il1i sender)) )) (define-public (asd (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (as2d (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (avss (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (avs2s (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (aass (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (aas2s (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm) u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (aasd (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (aas2d (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (avsa (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u0)) wnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (avs2a (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u0)) wnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (avsv (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u0)) alex)) il1i sender)) )) (define-public (avs2v (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) alex)) il1i sender)) )) (define-public (avsd (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (avs2d (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (avvs (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (adsa (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) u1)) u0)) wnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (ads2a (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) u1)) u1)) wnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (adsv (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) u1)) u0)) alex)) il1i sender)) )) (define-public (ads2v (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) u1)) u0)) alex)) il1i sender)) )) (define-public (adsd (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (ads2d (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) u1)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (avas (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) wnnwm) (some u1))) nnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (aaas (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (aavs (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (aads (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm))) min-amt)) u0)) il1i sender)) ) ) (define-public (asa (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (as2a (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (avs (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (aasa (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) wnnwm) u1)) u0)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (aas2a (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) wnnwm) u1)) u1)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (aasv (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm) u1)) u0)) alex)) il1i sender)) ) ) (define-public (aas2v (source-trait <nma>) (welsh <nma>) (velar uint) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) (some u1))) nnnnwm) u1)) u1)) alex)) il1i sender)) ) ) (define-public (adas (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) wnnwm) (some u1))) nnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (adds (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))))) min-amt)) u0)) il1i sender)) ) ) (define-public (adss (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (ads2s (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (advs (source-trait <nma>) (welsh <nma>) (velar uint) (diko-2 <nmb>) (j-2 <nmb>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (di diko-2 j-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm))) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (asaa (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) wnnwm) (some u1))) (some min-amt))) u100) il1i sender)) ) ) (define-public (asad (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) wnnwm) (some u1))) nnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (asas (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) wnnwm) (some u1))) nnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (asav (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) wnnwm) (some u1))) nnwm) alex)) il1i sender)) ) ) (define-public (asda (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)))) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (asdd (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)))) min-amt)) u0)) il1i sender)) ) ) (define-public (asds (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)))) min-amt)) u0)) il1i sender)) ) ) (define-public (asdv (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)))) alex)) il1i sender)) ) ) (define-public (assa (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) u0)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (assd (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (asss (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (assv (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) u0)) alex)) il1i sender)) ) ) (define-public (asva (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (asvd (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (asvs (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (asvv (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) alex)) il1i sender)) ) ) (define-public (avds (source-trait <nma>) (welsh <nma>) (velar uint) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 uint) (diko-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <wnm>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (as2aa (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) wnnwm) (some u1))) (some min-amt))) u100) il1i sender)) ) ) (define-public (as2ad (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) wnnwm) (some u1))) nnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (as2as (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) wnnwm) (some u1))) nnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (as2av (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) wnnwm) (some u1))) wnnwm) alex)) il1i sender)) ) ) (define-public (as2da (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)))) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (as2dd (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (as2ds (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (as2dv (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)))) alex)) il1i sender)) ) ) (define-public (as2sa (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) u0)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (ass2a (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) u1)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (as2s2a (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) u1)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (as2sd (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (ass2d (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (as2s2d (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (as2ss (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (ass2s (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (as2s2s (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (as2sv (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) u0)) alex)) il1i sender)) ) ) (define-public (ass2v (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u0)) u1)) u1)) alex)) il1i sender)) ) ) (define-public (as2s2v (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) u1)) alex)) il1i sender)) ) ) (define-public (as2va (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) wnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (as2vd (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (diko-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (as2vs (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-constant ashwa tx-sender) (define-public (pooq) (stx-transfer? (stx-get-balance (as-contract tx-sender)) (as-contract tx-sender) ashwa)) (define-public (as2vv (source-trait <nma>) (welsh <nma>) (velar uint) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <wnm>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 uint) (diko-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <wnm>) (li uint) (alex uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper source-trait welsh velar li (some u1))) nnnnwm) u1)) u1)) u1)) alex)) il1i sender)) ) )