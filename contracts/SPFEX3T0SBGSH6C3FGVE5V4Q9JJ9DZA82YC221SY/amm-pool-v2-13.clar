(use-trait nma 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait) (use-trait nmb 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait nmc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (use-trait share-fee-to-trait 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait) (use-trait sfttc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.share-fee-to-trait) (use-trait upt2 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait uft2 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait sspl 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (define-constant il1i (as-contract tx-sender)) (define-public (di (llijiji <nmb>) (wm <nmb>) (ii uint)) (ok (if (is-err (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details (contract-of wm) (contract-of llijiji))) (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y llijiji wm ii u1)) u1)) (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x llijiji wm ii u1)) u0)) ))) (define-public (vi (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (ii uint) (min-ii uint)) (ok (match O0O pool (get amt-out (try! (contract-call? pool swap jj jlj (unwrap-panic mnwmn) ii min-ii))) (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens id ill j jj jlj share-fee-to ii min-ii))) )) ) (define-public (vs (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint)  (ill <nmb>)  (j <nmb>)  (jj <nmb>)  (jlj <nmb>)  (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer?  (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi  O0O mnwmn id ill j jj jlj share-fee-to li u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (vsv (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) min-ii)) il1i sender)) )) (define-public (vs2v (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) min-ii)) il1i sender)) )) (define-public (vsa (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (vs2a (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (vvs (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (vsd (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-3 ill-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vs2d (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-3 ill-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vsva (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (vs2va (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (vss (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vs2s (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vas (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (lll1l1lI <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper lll1l1lI wmmuuun llI1ll (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (vass (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (lll1l1lI <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper lll1l1lI wmmuuun llI1ll (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) (some u1))) nnnnwm) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vas2s (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (lll1l1lI <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper lll1l1lI wmmuuun llI1ll (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) (some u1))) nnnnwm) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vssa (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (vs2sa (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (vss2a (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (vs2s2a (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) )) (define-public (vssd (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vs2sd (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vss2d (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vs2s2d (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vsvs (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (vs2vs (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (vsvv (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) min-ii)) il1i sender)) )) (define-public (vs2vv (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) min-ii)) il1i sender)) )) (define-public (vsvd (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (vs2vd (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) min-amt)) u0)) il1i sender)) )) (define-public (vsas (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) )) (define-public (vs2as (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) )) (define-public (vsav (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) (some u1))) nnnnwm) min-ii)) il1i sender)) )) (define-public (vs2av (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) (some u1))) nnnnwm) min-ii)) il1i sender)) )) (define-public (vsaa (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) (some u1))) (some min-amt))) u100) il1i sender)) )) (define-public (vs2aa (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) (some u1))) (some min-amt))) u100) il1i sender)) )) (define-public (vsad (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) )) (define-public (vs2ad (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) )) (define-public (vsds (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di ill-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)))) min-amt)) u0)) il1i sender)) )) (define-public (vs2ds (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di ill-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)))) min-amt)) u0)) il1i sender)) )) (define-public (vsss (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vs2ss (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vss2s (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vs2s2s (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-amt)) u0)) il1i sender)) )) (define-public (vssv (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-ii)) il1i sender)) )) (define-public (vs2sv (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-ii)) il1i sender)) )) (define-public (vss2v (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-ii)) il1i sender)) )) (define-public (vs2s2v (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)) u1)) u0)) u1)) u0)) min-ii)) il1i sender)) )) (define-public (vds (O0O (optional <upt2>)) (mnwmn (optional <uft2>)) (id uint) (ill <nmb>) (j <nmb>) (jj <nmb>) (jlj <nmb>) (share-fee-to <share-fee-to-trait>) (ill-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di ill-2 j-2 (try! (vi O0O mnwmn id ill j jj jlj share-fee-to li u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (vasa (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (lll1l1lI <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm-1 uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper lll1l1lI wmmuuun llI1ll (* (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) nnnnwm-1) (some u1))) u1)) u1)) (some min-amt))) il1i sender)) ) ) (define-public (vaas (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (lll1l1lI <nma>) (wmmuuun <nma>) (llI1ll uint) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? (/ li u100) sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper lll1l1lI wmmuuun llI1ll (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) (some u1))) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (vads (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (lll1l1lI <nma>) (wmmuuun <nma>) (llI1ll uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di ill-3 j-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper lll1l1lI wmmuuun llI1ll (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) (some u1))) nnnnwm))) min-amt)) u0)) il1i sender)) ) ) (define-public (vasv (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (lll1l1lI <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper lll1l1lI wmmuuun llI1ll (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) (some u1))) nnnnwm) u1)) u0)) min-ii)) il1i sender)) ) ) (define-public (vavs (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (lll1l1lI <nma>) (wmmuuun <nma>) (llI1ll uint) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper lll1l1lI wmmuuun llI1ll (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) (some u1))) nnnnwm) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (vdas (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (ill-2 <nmb>) (j-2 <nmb>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (try! (di ill-2 j-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)))) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (vdds (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (ill-2 <nmb>) (j-2 <nmb>) (ill-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di ill-3 j-3 (try! (di ill-2 j-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)))))) min-amt)) u0)) il1i sender)) ) ) (define-public (vdsa (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (ill-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di ill-2 j-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)))) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (vdsd (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (ill-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di ill-2 j-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)))) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (vdss (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (ill-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di ill-2 j-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)))) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (vdsv (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (ill-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di ill-2 j-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)))) u1)) u0)) min-ii)) il1i sender)) ) ) (define-public (vdvs (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (ill-2 <nmb>) (j-2 <nmb>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (di ill-2 j-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)))) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (vsda (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (try! (di ill-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u0)))) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (vsdd (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (try! (di ill-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u0)))) min-amt)) u0)) il1i sender)) ) ) (define-public (vsdv (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di ill-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u0)))) min-ii)) il1i sender)) ) ) (define-public (vvas (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jjijjji <nma>) (mnmnwwnmmm <nma>) (unnunmw uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper jjijjji mnmnwwnmmm unnunmw (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) (some u1))) nnnnwm) min-amt)) u0)) il1i sender)) ) ) (define-public (vvds (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (ill-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di ill-3 j-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)))) min-amt)) u0)) il1i sender)) ) ) (define-public (vvsa (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (vvsd (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (vvss (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (vvsv (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) u0)) min-ii)) il1i sender)) ) ) (define-public (vvvs (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (illl1ii (optional <upt2>)) (O0O00 (optional <uft2>)) (id-3 uint) (ill-3 <nmb>) (j-3 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 <share-fee-to-trait>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi illl1ii O0O00 id-3 ill-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) min-amt)) u0)) il1i sender)) ) ) (define-public (v2sda (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (try! (di ill-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u0)))) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (v2sdd (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (try! (di ill-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u0)))) min-amt)) u0)) il1i sender)) ) ) (define-public (v2sdv (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ill-3 <nmb>) (j-3 <nmb>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di ill-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u0)))) min-ii)) il1i sender)) ) ) (define-public (vvs2a (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (I1IIlIII <nma>) (lljjl uint) (li uint) (min-amt uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm I1IIlIII lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) u0)) nnnnwm) (some min-amt))) u100) il1i sender)) ) ) (define-public (vvs2d (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ill-4 <nmb>) (j-4 <nmb>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x j-4 ill-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (vvs2s (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (vvss2 (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (li uint) (min-amt uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) u0)) min-amt)) u0)) il1i sender)) ) ) (define-public (vvs2v (O0O-1 (optional <upt2>)) (mnwmn-1 (optional <uft2>)) (id-1 uint) (ill-1 <nmb>) (j-1 <nmb>) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 <share-fee-to-trait>) (il17ii (optional <upt2>)) (O00oO (optional <uft2>)) (id-2 uint) (ill-2 <nmb>) (j-2 <nmb>) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 <share-fee-to-trait>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <upt2>)) (OO00 (optional <uft2>)) (id-4 uint) (ill-4 <nmb>) (j-4 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 <share-fee-to-trait>) (li uint) (min-ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? li sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 ill-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 ill-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi O0O-1 mnwmn-1 id-1 ill-1 j-1 jj-1 jlj-1 share-fee-to-1 li u1)) u1)) u1)) u0)) min-ii)) il1i sender)) ) )