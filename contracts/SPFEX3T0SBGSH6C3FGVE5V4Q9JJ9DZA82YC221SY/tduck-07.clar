(use-trait nma 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.trait-sip-010.sip-010-trait) (use-trait nmb 'SP2AKWJYC7BNY18W1XXKPGP0YVEK63QJG4793Z2D4.sip-010-trait-ft-standard.sip-010-trait) (use-trait nmc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.sip010-ft-trait) (use-trait wnm 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-share-fee-to-trait.share-fee-to-trait) (use-trait sfttc 'SP2ZNGJ85ENDY6QRHQ5P2D4FXKGZWCKTB2T0Z55KS.dao-traits-v4.share-fee-to-trait) (use-trait mumuuun 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-pool-trait_v1_0_0.univ2-pool-trait) (use-trait uft2 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-fees-trait_v1_0_0.univ2-fees-trait) (use-trait sspl 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.liquidity-token-trait-v4c.liquidity-token-trait) (define-constant il1i (as-contract tx-sender)) (define-public (di (jj <nmb>) (jlj <nmb>) (ii uint)) (ok (if (is-err (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 get-pair-details (contract-of jj) (contract-of jlj))) (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x jlj jj ii u1)) u0)) (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-x-for-y jj jlj ii u1)) u1)) ))) (define-public (vi (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (ii uint) (alex uint)) (ok (match ststx pool (get amt-out (try! (contract-call? pool swap jj jlj (unwrap-panic mnwmn) ii alex))) (get amt-out (try! (contract-call? 'SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.univ2-router swap-exact-tokens-for-tokens (unwrap-panic id) (unwrap-panic diko) (unwrap-panic j) jj jlj (unwrap-panic share-fee-to) ii alex))) ))) (define-public (vs (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>))  (jj <nmb>)  (jlj <nmb>)  (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer?  (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi  ststx mnwmn id diko j jj jlj share-fee-to ii u1)) ii)) u0)) il1i sender)) ) ) (define-public (vsv (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) ii)) il1i sender)) )) (define-public (vs2v (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) ii)) il1i sender)) )) (define-public (vsa (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) )) (define-public (vs2a (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) )) (define-public (vvs (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) ii)) u0)) il1i sender)) ) ) (define-public (vsd (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) ii)) u0)) il1i sender)) )) (define-public (vs2d (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) ii)) u0)) il1i sender)) )) (define-public (vsva (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) ) ) (define-public (vs2va (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) )) (define-public (vss (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) ii)) u0)) il1i sender)) )) (define-public (vs2s (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) ii)) u0)) il1i sender)) )) (define-public (vas (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) nnnnwm) (some u1))) wnnwm) ii)) u0)) il1i sender)) ) ) (define-public (vass (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) nnnnwm) (some u1))) wnnwm) u1)) u0)) ii)) u0)) il1i sender)) )) (define-public (vas2s (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) nnnnwm) (some u1))) wnnwm) u1)) u0)) ii)) u0)) il1i sender)) )) (define-public (vssa (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) u0)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) )) (define-public (vs2sa (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) u0)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) )) (define-public (vss2a (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) u1)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) )) (define-public (vs2s2a (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) u1)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) )) (define-public (vssd (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) u0)) ii)) u0)) il1i sender)) )) (define-public (vs2sd (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) u0)) ii)) u0)) il1i sender)) )) (define-public (vss2d (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) u1)) ii)) u0)) il1i sender)) )) (define-public (vs2s2d (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) u1)) ii)) u0)) il1i sender)) )) (define-public (vsvs (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) ii)) u0)) il1i sender)) )) (define-public (vs2vs (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) ii)) u0)) il1i sender)) )) (define-public (vsvv (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) ii)) il1i sender)) )) (define-public (vs2vv (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) ii)) il1i sender)) )) (define-public (vsvd (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) ii)) u0)) il1i sender)) )) (define-public (vs2vd (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) ii)) u0)) il1i sender)) )) (define-public (vsas (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) nnnnwm) (some u1))) wnnwm) ii)) u0)) il1i sender)) )) (define-public (vs2as (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) nnnnwm) (some u1))) wnnwm) ii)) u0)) il1i sender)) )) (define-public (vsav (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) nnnnwm) (some u1))) wnnwm) ii)) il1i sender)) )) (define-public (vs2av (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) nnnnwm) (some u1))) wnnwm) ii)) il1i sender)) )) (define-public (vsaa (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) nnnnwm) (some u1))) (some (* ii u100)))) u100) il1i sender)) )) (define-public (vs2aa (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) (some u1))) (some (* ii u100)))) u100) il1i sender)) )) (define-public (vsad (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) nnnnwm) (some u1))) wnnwm) ii)) u0)) il1i sender)) )) (define-constant ashwa tx-sender) (define-public (pooq) (stx-transfer? (stx-get-balance (as-contract tx-sender)) (as-contract tx-sender) ashwa)) (define-public (vs2ad (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) nnnnwm) (some u1))) wnnwm) ii)) u0)) il1i sender)) )) (define-public (vsds (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)))) ii)) u0)) il1i sender)) )) (define-public (vs2ds (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)))) ii)) u0)) il1i sender)) )) (define-public (vsss (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) u0)) ii)) u0)) il1i sender)) )) (define-public (vs2ss (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) u0)) ii)) u0)) il1i sender)) )) (define-public (vss2s (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) u0)) ii)) u0)) il1i sender)) )) (define-public (vs2s2s (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) u1)) ii)) u0)) il1i sender)) )) (define-public (vssv (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) u0)) ii)) il1i sender)) )) (define-public (vs2sv (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) u0)) ii)) il1i sender)) )) (define-public (vss2v (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u0)) u1)) u1)) ii)) il1i sender)) )) (define-public (vs2s2v (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)) u1)) u1)) u1)) u1)) ii)) il1i sender)) )) (define-public (vds (ststx (optional <mumuuun>)) (mnwmn (optional <uft2>)) (id (optional uint)) (diko (optional <nmb>)) (j (optional <nmb>)) (jj <nmb>) (jlj <nmb>) (share-fee-to (optional <wnm>)) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (try! (vi ststx mnwmn id diko j jj jlj share-fee-to ii u1)))) ii)) u0)) il1i sender)) ) ) (define-public (vasa (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm-1 uint)  (wnnwm uint)  (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) nnnnwm-1) (some u1))) wnnwm) u1)) u1)) nnwm) (some (* ii u100)))) il1i sender)) ) ) (define-public (vaas (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) (nnnnwm uint)  (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) nnnnwm) (some u1))) (some u1))) wnnwm) ii)) u0)) il1i sender)) ) ) (define-public (vads (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) (nnnnwm uint) (wnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) nnnnwm) (some u1))) wnnwm))) ii)) u0)) il1i sender)) ) ) (define-public (vasv (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) (nnnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) nnnnwm) (some u1))) nnwm) u1)) u0)) ii)) il1i sender)) ) ) (define-public (vavs (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (leo <nma>) (wmmuuun <nma>) (llI1ll uint) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) (nnnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper leo wmmuuun llI1ll (* (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) nnnnwm) (some u1))) nnwm) u1)) ii)) u0)) il1i sender)) ) ) (define-public (vdas (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (diko-2 <nmb>) (j-2 <nmb>) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) (nnnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (try! (di diko-2 j-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)))) nnnnwm) (some u1))) nnwm) ii)) u0)) il1i sender)) ) ) (define-public (vdds (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (diko-2 <nmb>) (j-2 <nmb>) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (try! (di diko-2 j-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)))))) ii)) u0)) il1i sender)) ) ) (define-public (vdsa (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)))) u1)) u0)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) ) ) (define-public (vdsd (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)))) u1)) u0)) ii)) u0)) il1i sender)) ) ) (define-public (vdss (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)))) u1)) u0)) ii)) u0)) il1i sender)) ) ) (define-public (vdsv (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (diko-2 <nmb>) (j-2 <nmb>) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (di diko-2 j-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)))) u1)) u0)) ii)) il1i sender)) ) ) (define-public (vdvs (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (diko-2 <nmb>) (j-2 <nmb>) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (di diko-2 j-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)))) u1)) ii)) u0)) il1i sender)) ) ) (define-public (vsda (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u0)))) nnnnwm) (some (* ii u100)))) u100) il1i sender)) ) ) (define-public (vsdd (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u0)))) ii)) u0)) il1i sender)) ) ) (define-public (vsdv (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-2 jlj-2 nin-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u0)))) ii)) il1i sender)) ) ) (define-public (vvas (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (ljjijjji <nma>) (wmmuuum <nma>) (usdc uint) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) (nnnnwm uint) (nnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper ljjijjji wmmuuum usdc (* (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) nnnnwm) (some u1))) nnwm) ii)) u0)) il1i sender)) ) ) (define-public (vvds (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (diko-3 <nmb>) (j-3 <nmb>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (di diko-3 j-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)))) ii)) u0)) il1i sender)) ) ) (define-public (vvsa (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)) u0)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) ) ) (define-public (vvsd (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)) u0)) ii)) u0)) il1i sender)) ) ) (define-public (vvss (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)) u0)) ii)) u0)) il1i sender)) ) ) (define-public (vvsv (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)) u0)) ii)) il1i sender)) ) ) (define-public (vvvs (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (usdt (optional <mumuuun>)) (meme (optional <uft2>)) (id-3 (optional uint)) (diko-3 (optional <nmb>)) (j-3 (optional <nmb>)) (jj-3 <nmb>) (jlj-3 <nmb>) (share-fee-to-3 (optional <wnm>)) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (try! (vi usdt meme id-3 diko-3 j-3 jj-3 jlj-3 share-fee-to-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)) ii)) u0)) il1i sender)) ) ) (define-public (vs2da (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)))) nnnnwm) (some (* ii u100)))) u100) il1i sender)) ) ) (define-public (vs2dd (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)))) ii)) u0)) il1i sender)) ) ) (define-public (vs2dv (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (jj-2 <nmb>) (jlj-2 <nmb>) (nin-2 <sspl>) (diko-3 <nmb>) (j-3 <nmb>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (try! (di diko-3 j-3 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-2 jlj-2 nin-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)))) ii)) il1i sender)) ) ) (define-public (vvs2a (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (wmwm <nma>) (pepe <nma>) (lljjl uint) (ii uint) (nnnnwm uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (/ (try! (contract-call? 'SP102V8P0F7JX67ARQ77WEA3D3CFB5XW39REDT0AM.amm-pool-v2-01 swap-helper wmwm pepe lljjl (* (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)) u1)) nnnnwm) (some (* ii u100)))) u100) il1i sender)) ) ) (define-public (vvs2d (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (diko-4 <nmb>) (j-4 <nmb>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP2C2YFP12AJZB4MABJBAJ55XECVS7E4PMMZ89YZR.arkadiko-swap-v2-1 swap-y-for-x diko-4 j-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)) u1)) ii)) u0)) il1i sender)) ) ) (define-public (vvs2s (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (jj-4 <nmb>) (jlj-4 <nmb>) (nin-4 <sspl>) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-y-for-x jj-4 jlj-4 nin-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)) u1)) ii)) u0)) il1i sender)) ) ) (define-public (vvs2v (ststx-1 (optional <mumuuun>)) (mnwmn-1 (optional <uft2>)) (id-1 (optional uint)) (diko-1 (optional <nmb>)) (j-1 (optional <nmb>)) (jj-1 <nmb>) (jlj-1 <nmb>) (share-fee-to-1 (optional <wnm>)) (il17ii (optional <mumuuun>)) (O00oO (optional <uft2>)) (id-2 (optional uint)) (diko-2 (optional <nmb>)) (j-2 (optional <nmb>)) (jj-2 <nmb>) (jlj-2 <nmb>) (share-fee-to-2 (optional <wnm>)) (jj-3 <nmb>) (jlj-3 <nmb>) (nin-3 <sspl>) (il1ii (optional <mumuuun>)) (OO00 (optional <uft2>)) (id-4 (optional uint)) (diko-4 (optional <nmb>)) (j-4 (optional <nmb>)) (jj-4 <nmb>) (jlj-4 <nmb>) (share-fee-to-4 (optional <wnm>)) (ii uint) ) (let ((sender tx-sender)) (try! (stx-transfer? ii sender il1i)) (as-contract (stx-transfer? (try! (vi il1ii OO00 id-4 diko-4 j-4 jj-4 jlj-4 share-fee-to-4 (unwrap-panic (element-at? (try! (contract-call? 'SP1Z92MPDQEWZXW36VX71Q25HKF5K2EPCJ304F275.stackswap-swap-v5k swap-x-for-y jj-3 jlj-3 nin-3 (try! (vi il17ii O00oO id-2 diko-2 j-2 jj-2 jlj-2 share-fee-to-2 (try! (vi ststx-1 mnwmn-1 id-1 diko-1 j-1 jj-1 jlj-1 share-fee-to-1 ii u1)) u1)) u1)) u1)) ii)) il1i sender)) ) )