(define-fungible-token auto-alex-v3)
(define-constant ERR-NOT-AUTHORIZED (err u1000))
(define-constant ERR-INVALID-AMOUNT (err u1001))
(define-constant ONE_8 u100000000)
(define-data-var contract-owner principal tx-sender)
(define-map approved-contracts principal bool)
(define-data-var token-name (string-ascii 32) "Auto ALEX v3")
(define-data-var token-symbol (string-ascii 10) "atALEXv3")
(define-data-var token-uri (optional (string-utf8 256)) (some u"https://cdn.alexlab.co/metadata/auto-alex-v3.json"))
(define-data-var token-decimals uint u8)
(define-data-var reserve uint u0)
(define-public (set-contract-owner (owner principal))
  (begin
    (try! (check-is-owner))
    (ok (var-set contract-owner owner))))
(define-public (set-approved-contract (owner principal) (approved bool))
	(begin
		(try! (check-is-owner))
		(ok (map-set approved-contracts owner approved))))
(define-public (set-name (new-name (string-ascii 32)))
	(begin
		(try! (check-is-owner))
		(ok (var-set token-name new-name))))
(define-public (set-symbol (new-symbol (string-ascii 10)))
	(begin
		(try! (check-is-owner))
		(ok (var-set token-symbol new-symbol))))
(define-public (set-decimals (new-decimals uint))
	(begin
		(try! (check-is-owner))
		(ok (var-set token-decimals new-decimals))))
(define-public (set-token-uri (new-uri (optional (string-utf8 256))))
	(begin
		(try! (check-is-owner))
		(ok (var-set token-uri new-uri))))
(define-public (set-reserve (new-reserve uint))
	(begin 
		(asserts! (or (is-ok (check-is-approved)) (is-ok (check-is-owner))) ERR-NOT-AUTHORIZED)
		(var-set reserve new-reserve)
		(print {notification: "rebase", payload: {reserve: (var-get reserve), total-shares: (ft-get-supply auto-alex-v3)}})
		(ok true)))
(define-public (add-reserve (increment uint))
	(set-reserve (+ (var-get reserve) increment)))
(define-public (remove-reserve (decrement uint))
	(begin 
		(asserts! (<= decrement (var-get reserve)) ERR-INVALID-AMOUNT)
		(set-reserve (- (var-get reserve) decrement))))
(define-public (mint (amount uint) (recipient principal))
	(begin		
		(asserts! (or (is-ok (check-is-approved)) (is-ok (check-is-owner))) ERR-NOT-AUTHORIZED)
		(ft-mint? auto-alex-v3 (get-tokens-to-shares amount) recipient)))
(define-public (mint-fixed (amount uint) (recipient principal))
	(mint amount recipient))
(define-public (burn (amount uint) (sender principal))
	(begin
		(asserts! (or (is-ok (check-is-approved)) (is-ok (check-is-owner))) ERR-NOT-AUTHORIZED)
		(ft-burn? auto-alex-v3 (get-tokens-to-shares amount) sender)))
	
(define-public (burn-fixed (amount uint) (sender principal))
	(burn amount sender))
(define-public (burn-many (senders (list 200 {amount: uint, sender: principal})))
	(fold check-err (map burn-many-iter senders) (ok true)))
(define-public (burn-fixed-many (senders (list 200 {amount: uint, sender: principal})))
	(burn-many senders))
(define-read-only (get-contract-owner)
  (var-get contract-owner))
(define-read-only (get-name)
	(ok (var-get token-name)))
(define-read-only (get-symbol)
	(ok (var-get token-symbol)))
(define-read-only (get-token-uri)
	(ok (var-get token-uri)))
(define-read-only (get-decimals)
	(ok (var-get token-decimals)))
(define-read-only (get-balance (who principal))
	(ok (get-shares-to-tokens (unwrap-panic (get-share who)))))
(define-read-only (get-balance-fixed (who principal))
	(get-balance who))
(define-read-only (get-total-supply)
	(get-reserve))
(define-read-only (get-total-supply-fixed)
	(get-total-supply))
(define-read-only (get-share (who principal))
	(ok (ft-get-balance auto-alex-v3 who)))
(define-read-only (get-share-fixed (who principal))
	(get-share who))
(define-read-only (get-total-shares)
	(ok (ft-get-supply auto-alex-v3)))
(define-read-only (get-total-shares-fixed)
	(get-total-shares))
(define-read-only (get-reserve)
	(ok (var-get reserve)))
(define-read-only (get-reserve-fixed)
	(get-reserve))
(define-read-only (get-tokens-to-shares (amount uint))
	(if (is-eq (get-reserve) (ok u0))
		amount
		(/ (* amount (unwrap-panic (get-total-shares))) (unwrap-panic (get-reserve)))))
(define-read-only (get-shares-to-tokens (shares uint))
	(if (is-eq (get-total-shares) (ok u0))
		shares
		(/ (* shares (unwrap-panic (get-reserve))) (unwrap-panic (get-total-shares)))))
(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 2048))))
	(let (
			(shares (get-tokens-to-shares amount)))
		(asserts! (or (is-eq tx-sender sender) (is-eq contract-caller sender)) ERR-NOT-AUTHORIZED)
		(try! (ft-transfer? auto-alex-v3 shares sender recipient))
		(match memo to-print (print to-print) 0x)
		(print { notification: "transfer", payload: { amount: amount, shares: shares, sender: sender, recipient: recipient } })
		(ok true)))
(define-public (transfer-fixed (amount uint) (sender principal) (recipient principal) (memo (optional (buff 2048))))
	(transfer amount sender recipient memo))
(define-private (burn-many-iter (item {amount: uint, sender: principal}))
	(burn (get amount item) (get sender item)))
(define-private (check-err (result (response bool uint)) (prior (response bool uint)))
    (match prior ok-value result err-value (err err-value)))
(define-private (check-is-owner)
  (ok (asserts! (is-eq tx-sender (var-get contract-owner)) ERR-NOT-AUTHORIZED)))
(define-private (check-is-approved)
  (ok (asserts! (default-to false (map-get? approved-contracts tx-sender)) ERR-NOT-AUTHORIZED)))
(use-trait ft-trait .trait-sip-010.sip-010-trait)
(define-public (stake-tokens (amount-tokens uint) (lock-period uint))
	(begin
		(asserts! (or (is-ok (check-is-approved)) (is-ok (check-is-owner))) ERR-NOT-AUTHORIZED)
		(as-contract (contract-call? .alex-reserve-pool stake-tokens .age000-governance-token amount-tokens lock-period))))
(define-public (transfer-token (token-trait <ft-trait>) (amount uint) (recipient principal))
	(begin 
		(asserts! (or (is-ok (check-is-approved)) (is-ok (check-is-owner))) ERR-NOT-AUTHORIZED)
		(if (is-eq (contract-of token-trait) (as-contract tx-sender))
			(as-contract (transfer-fixed amount tx-sender recipient none))
			(as-contract (contract-call? token-trait transfer-fixed amount tx-sender recipient none)))))
(define-public (claim-staking-reward (reward-cycle uint))
	(begin 
		(asserts! (or (is-ok (check-is-approved)) (is-ok (check-is-owner))) ERR-NOT-AUTHORIZED)
		(as-contract (contract-call? .alex-reserve-pool claim-staking-reward .age000-governance-token reward-cycle))))
(define-public (reduce-position-v2)
	(begin 
		(asserts! (or (is-ok (check-is-approved)) (is-ok (check-is-owner))) ERR-NOT-AUTHORIZED)		
		(if (is-eq u0 (unwrap-panic (contract-call? .auto-alex-v2 get-balance (as-contract tx-sender))))
			(ok u0)
			(as-contract (contract-call? .auto-alex-v2 reduce-position ONE_8)))))
(contract-call? .alex-vault-v1-1 set-approved-token .auto-alex-v3-1 true)